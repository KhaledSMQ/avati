name: Bundle Analysis

on:
  pull_request:
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to analyze (e.g., signal)'
        required: true

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build packages
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PACKAGE="@avatijs/${{ github.event.inputs.package }}"
            yarn workspace $PACKAGE build
          else
            yarn build
          fi

      - name: Analyze bundle
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PACKAGE="@avatijs/${{ github.event.inputs.package }}"
            yarn workspace $PACKAGE analyze:bundle
          else
            # Get changed packages
            CHANGED=$(yarn lerna list --since origin/${{ github.base_ref }} --json)
            echo "$CHANGED" | jq -r '.[] | .name' | while read package; do
              echo "Analyzing bundle for $package"
              yarn workspace $package analyze:bundle
            done
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            **/stats.json
            **/bundle-analysis.html

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read analysis results
            const results = {};
            const packages = JSON.parse('${{ needs.detect-changes.outputs.changed_packages }}');
            
            for (const pkg of packages) {
              const statsPath = `packages/${pkg.name.replace('@avatijs/', '')}/stats.json`;
              if (fs.existsSync(statsPath)) {
                const stats = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
                results[pkg.name] = stats;
              }
            }
            
            // Create comment body
            let body = '## Bundle Analysis\n\n';
            
            for (const [pkg, stats] of Object.entries(results)) {
              body += `### ${pkg}\n`;
              body += '```diff\n';
              body += `+ Bundle Size: ${(stats.assets[0].size / 1024).toFixed(2)}KB\n`;
              body += `+ Gzipped Size: ${(stats.assets[0].gzipSize / 1024).toFixed(2)}KB\n`;
              body += '```\n\n';
            }
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
