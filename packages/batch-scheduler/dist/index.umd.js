/*!
 * @avatijs/batch-scheduler 0.1.0
 * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit https://avati.io/ for details.
 */

/* eslint-disable */

/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Avati", [], factory);
	else if(typeof exports === 'object')
		exports["Avati"] = factory();
	else
		root["Avati"] = factory();
})(typeof self !== 'undefined' ? self : this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/batch-scheduler.ts":
/*!********************************!*\
  !*** ./src/batch-scheduler.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchScheduler: () => (/* binding */ BatchScheduler),\n/* harmony export */   batchUpdates: () => (/* binding */ batchUpdates)\n/* harmony export */ });\n/* harmony import */ var _dev__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dev */ \"./src/dev.ts\");\n/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n/**\n * BatchScheduler is responsible for managing and executing tasks in batches.\n * It supports task prioritization, cancellation, error handling, and batching contexts.\n *\n * @example\n * // Retrieve the singleton instance\n * const scheduler = BatchScheduler.getInstance();\n *\n * // Schedule a task\n * scheduler.schedule(() => {\n *     console.debug('Task executed.');\n * });\n *\n * // Schedule a high-priority task\n * scheduler.schedule(() => {\n *     console.debug('High-priority task executed.');\n * }, { priority: 10 });\n *\n * // Start a batching context\n * scheduler.startBatch();\n *\n * // Schedule tasks within the batch\n * scheduler.schedule(() => {\n *     console.debug('Task within batch.');\n * });\n *\n * // End the batching context to process tasks\n * scheduler.endBatch();\n *\n * // Flush pending tasks immediately\n * scheduler.flush();\n *\n * // Shutdown the scheduler\n * scheduler.shutdown();\n */\nclass BatchScheduler {\n    constructor() {\n        /**\n         * Depth of the current batching context.\n         */\n        this.batchDepth = 0;\n        /**\n         * Queue of tasks scheduled for execution.\n         */\n        this.taskQueue = [];\n        /**\n         * Indicates whether the task queue is scheduled for processing.\n         */\n        this.isScheduled = false;\n        /**\n         * Indicates whether the scheduler is shutting down.\n         */\n        this.isShuttingDown = false;\n        /**\n         * Current batch promise.\n         * @private\n         */\n        this.currentBatchPromise = null;\n    }\n    /**\n     * Retrieves the singleton instance of the BatchScheduler.\n     *\n     * @returns {BatchScheduler} The singleton instance.\n     *\n     * @example\n     * const scheduler = BatchScheduler.getInstance();\n     */\n    static getInstance() {\n        if (BatchScheduler.instance === null) {\n            BatchScheduler.instance = new BatchScheduler();\n        }\n        return BatchScheduler.instance;\n    }\n    /**\n     * Schedules a task for execution. Supports task prioritization, cancellation, and error handling.\n     *\n     * @param {TaskFunction} task - The function to be executed.\n     * @param {TaskOptions} [options={}] - Optional settings for the task.\n     *\n     * @throws {Error} If the scheduler is shutting down.\n     *\n     * @example\n     * // Schedule a simple task\n     * scheduler.schedule(() => {\n     *     console.debug('Task executed.');\n     * });\n     *\n     * @example\n     * // Schedule a task with high priority\n     * scheduler.schedule(() => {\n     *     console.debug('High-priority task executed.');\n     * }, { priority: 5 });\n     *\n     * @example\n     * // Schedule a task with an error handler\n     * scheduler.schedule(() => {\n     *     throw new Error('Task error');\n     * }, {\n     *     onError: (error) => {\n     *         console.error('Handled task error:', error);\n     *     },\n     * });\n     *\n     * @example\n     * // Schedule a task with a cancellation token\n     * const token = scheduler.createCancellationToken();\n     * scheduler.schedule(() => {\n     *     console.debug('This task may be cancelled.');\n     * }, { cancellationToken: token });\n     *\n     * // Cancel the task before it executes\n     * token.cancel();\n     */\n    schedule(task, options = {}) {\n        if (this.isShuttingDown) {\n            throw new Error('Cannot schedule tasks after shutdown has been initiated.');\n        }\n        options.name = options.name || 'anonymous';\n        const { priority = 0, onError, cancellationToken: token, name = 'anonymous', } = options;\n        this.taskQueue.push({ task, priority, onError, token });\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Task scheduled: ${name} (priority: ${priority})`);\n        // Sort the task queue by priority in descending order.\n        this.taskQueue.sort((a, b) => b.priority - a.priority);\n        if (!this.isScheduled && this.batchDepth === 0) {\n            this.isScheduled = true;\n            queueMicrotask(() => {\n                this.currentBatchPromise = this.processQueue();\n            });\n        }\n    }\n    /**\n     * Begins a new batching context. Tasks scheduled within this context\n     * will be deferred until the batch ends.\n     *\n     * @example\n     * scheduler.startBatch();\n     * // Schedule tasks within the batch\n     * scheduler.schedule(() => {\n     *     console.debug('Task within batch.');\n     * });\n     * // End the batching context\n     * scheduler.endBatch();\n     */\n    startBatch() {\n        this.batchDepth++;\n    }\n    /**\n     * Ends the current batching context. If all batching contexts have ended,\n     * pending tasks will be processed.\n     *\n     * @throws {Error} If there is no batching context to end.\n     *\n     * @example\n     * // Assuming a batching context has been started\n     * scheduler.endBatch();\n     */\n    endBatch() {\n        if (this.batchDepth === 0) {\n            throw new Error('No batch to end.');\n        }\n        this.batchDepth--;\n        if (this.batchDepth === 0 && this.taskQueue.length > 0) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Batch ended, processing tasks (${this.taskQueue.length})`);\n            this.currentBatchPromise = this.processQueue();\n        }\n    }\n    /**\n     * Processes the task queue, executing tasks in order of priority.\n     */\n    async processQueue() {\n        var _a;\n        this.isScheduled = false;\n        if (this.batchDepth > 0 || this.isShuttingDown) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(\"Batch depth is greater than 0 or shutting down, returning\");\n            return;\n        }\n        const tasksToProcess = this.taskQueue;\n        this.taskQueue = [];\n        for (const scheduledTask of tasksToProcess) {\n            if ((_a = scheduledTask.token) === null || _a === void 0 ? void 0 : _a.isCancelled) {\n                (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(\"Task is cancelled, skipping\");\n                continue;\n            }\n            try {\n                const result = scheduledTask.task();\n                // If the task returns a promise, we need to wait for it\n                if (result instanceof Promise) {\n                    scheduledTask.promise = result;\n                    await result;\n                    (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Task completed: ${scheduledTask.name}`);\n                }\n                else {\n                    // For synchronous tasks, we create a resolved promise\n                    scheduledTask.promise = Promise.resolve();\n                }\n            }\n            catch (error) {\n                (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Task failed: ${scheduledTask.name}`);\n                if (scheduledTask.onError) {\n                    try {\n                        scheduledTask.onError(error);\n                    }\n                    catch (errorInHandler) {\n                        console.error('Error in onError handler:', errorInHandler);\n                    }\n                }\n                else {\n                    console.error('Error in batched task:', error);\n                }\n            }\n        }\n        if (this.taskQueue.length > 0 && this.batchDepth === 0) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(\"Task queue is not empty, scheduling next batch\");\n            this.isScheduled = true;\n            queueMicrotask(() => this.processQueue());\n        }\n    }\n    /**\n     * Cancels all pending tasks and prevents new tasks from being scheduled.\n     *\n     * @example\n     * scheduler.shutdown();\n     */\n    shutdown() {\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Shutting down scheduler');\n        this.isShuttingDown = true;\n        this.taskQueue = [];\n    }\n    /**\n     * Immediately processes all pending tasks in the queue.\n     *\n     * @throws {Error} If called within a batching context.\n     *\n     * @example\n     * scheduler.flush();\n     */\n    flush() {\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Flushing scheduler');\n        if (this.batchDepth > 0) {\n            throw new Error('Cannot flush while in a batching context.');\n        }\n        // Trigger completion of current batch without blocking\n        if (this.currentBatchPromise) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Completing current batch');\n            this.currentBatchPromise.finally();\n        }\n        // Process any remaining tasks without blocking\n        if (this.taskQueue.length > 0) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Processing remaining tasks');\n            this.currentBatchPromise = this.processQueue();\n            this.currentBatchPromise.finally();\n        }\n    }\n    /**\n     * Creates a cancellation token that can be used to cancel a scheduled task.\n     *\n     * @returns {CancellationToken} A new cancellation token.\n     *\n     * @example\n     * const token = scheduler.createCancellationToken();\n     * scheduler.schedule(() => {\n     *     console.debug('This task may be cancelled.');\n     * }, { cancellationToken: token });\n     *\n     * // Cancel the task before it executes\n     * token.cancel();\n     */\n    createCancellationToken() {\n        let isCancelled = false;\n        return {\n            cancel: () => {\n                isCancelled = true;\n            },\n            get isCancelled() {\n                return isCancelled;\n            },\n        };\n    }\n}\n/**\n * Singleton instance of the BatchScheduler.\n */\nBatchScheduler.instance = null;\n/**\n * Executes a function within a batching context. Tasks scheduled within the function\n * will be deferred until the batch ends.\n *\n * @param {() => T} fn - The function to execute.\n *\n * @returns {T} The return value of the executed function.\n *\n * @template T\n *\n * @example\n * batchUpdates(() => {\n *     // Schedule tasks within the batch\n *     scheduler.schedule(() => {\n *         console.debug('Task within batch.');\n *     });\n *     // Other synchronous operations\n *     console.debug('Batching operations complete.');\n * });\n */\nfunction batchUpdates(fn) {\n    const scheduler = BatchScheduler.getInstance();\n    (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Starting batch...');\n    scheduler.startBatch();\n    try {\n        return fn();\n    }\n    finally {\n        scheduler.endBatch();\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Batch ended.');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxPQUFPLEVBQUU7UUFDdEMsQ0FBQztRQUVELCtDQUErQztRQUMvQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzVCLDhDQUFRLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN2QyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSSx1QkFBdUI7UUFDMUIsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXhCLE9BQU87WUFDSCxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUNULFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDdkIsQ0FBQztZQUNELElBQUksV0FBVztnQkFDWCxPQUFPLFdBQVcsQ0FBQztZQUN2QixDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUM7O0FBaFJEOztHQUVHO0FBQ1ksdUJBQVEsR0FBMEIsSUFBSSxDQUFDO0FBZ1IxRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNJLFNBQVMsWUFBWSxDQUFJLEVBQVc7SUFDdkMsTUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQy9DLDhDQUFRLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUM5QixTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFdkIsSUFBSSxDQUFDO1FBQ0QsT0FBTyxFQUFFLEVBQUUsQ0FBQztJQUNoQixDQUFDO1lBQVMsQ0FBQztRQUNQLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQiw4Q0FBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7QUFDTCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXZhdGkvLi9zcmMvYmF0Y2gtc2NoZWR1bGVyLnRzPzA3NzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjQgS2hhbGVkIFNhbWVlciA8a2hhbGVkLnNtcUBob3RtYWlsLmNvbT4uXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKiovXG5cbmltcG9ydCB7IGRlYnVnTG9nIH0gZnJvbSAnLi9kZXYnO1xuXG4vKipcbiAqIFR5cGUgZGVmaW5pdGlvbnMgZm9yIHRhc2sgZnVuY3Rpb25zIGFuZCBwcmlvcml0aWVzLlxuICovXG50eXBlIFRhc2tGdW5jdGlvbiA9ICgpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xudHlwZSBQcmlvcml0eSA9IG51bWJlcjtcblxuLyoqXG4gKiBJbnRlcmZhY2UgcmVwcmVzZW50aW5nIHRoZSBvcHRpb25zIGF2YWlsYWJsZSB3aGVuIHNjaGVkdWxpbmcgYSB0YXNrLlxuICovXG5pbnRlcmZhY2UgVGFza09wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIFRoZSBwcmlvcml0eSBsZXZlbCBvZiB0aGUgdGFzay4gSGlnaGVyIG51bWJlcnMgaW5kaWNhdGUgaGlnaGVyIHByaW9yaXR5LlxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBwcmlvcml0eT86IFByaW9yaXR5O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdG8gaGFuZGxlIGFueSBlcnJvcnMgdGhhdCBvY2N1ciBkdXJpbmcgdGFzayBleGVjdXRpb24uXG4gICAgICovXG4gICAgb25FcnJvcj86IChlcnJvcjogdW5rbm93bikgPT4gdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEEgY2FuY2VsbGF0aW9uIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSBzY2hlZHVsZWQgdGFzayBiZWZvcmUgaXQgZXhlY3V0ZXMuXG4gICAgICovXG4gICAgY2FuY2VsbGF0aW9uVG9rZW4/OiBDYW5jZWxsYXRpb25Ub2tlbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0YXNrLiBUaGlzIGlzIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSByZXByZXNlbnRpbmcgYSBzY2hlZHVsZWQgdGFzayB3aXRoaW4gdGhlIHRhc2sgcXVldWUuXG4gKi9cbmludGVyZmFjZSBTY2hlZHVsZWRUYXNrIHtcbiAgICB0YXNrOiBUYXNrRnVuY3Rpb247XG4gICAgcHJpb3JpdHk6IFByaW9yaXR5O1xuICAgIG9uRXJyb3I/OiAoZXJyb3I6IHVua25vd24pID0+IHZvaWQ7XG4gICAgdG9rZW4/OiBDYW5jZWxsYXRpb25Ub2tlbjtcbiAgICBwcm9taXNlPzogUHJvbWlzZTx2b2lkPjtcbiAgICBuYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSByZXByZXNlbnRpbmcgYSBjYW5jZWxsYXRpb24gdG9rZW4gZm9yIGEgc2NoZWR1bGVkIHRhc2suXG4gKi9cbmludGVyZmFjZSBDYW5jZWxsYXRpb25Ub2tlbiB7XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyB0aGUgc2NoZWR1bGVkIHRhc2suXG4gICAgICovXG4gICAgY2FuY2VsOiAoKSA9PiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRhc2sgaGFzIGJlZW4gY2FuY2VsbGVkLlxuICAgICAqL1xuICAgIGlzQ2FuY2VsbGVkOiBib29sZWFuO1xufVxuXG5cbi8qKlxuICogQmF0Y2hTY2hlZHVsZXIgaXMgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIGFuZCBleGVjdXRpbmcgdGFza3MgaW4gYmF0Y2hlcy5cbiAqIEl0IHN1cHBvcnRzIHRhc2sgcHJpb3JpdGl6YXRpb24sIGNhbmNlbGxhdGlvbiwgZXJyb3IgaGFuZGxpbmcsIGFuZCBiYXRjaGluZyBjb250ZXh0cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmV0cmlldmUgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZVxuICogY29uc3Qgc2NoZWR1bGVyID0gQmF0Y2hTY2hlZHVsZXIuZ2V0SW5zdGFuY2UoKTtcbiAqXG4gKiAvLyBTY2hlZHVsZSBhIHRhc2tcbiAqIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XG4gKiAgICAgY29uc29sZS5kZWJ1ZygnVGFzayBleGVjdXRlZC4nKTtcbiAqIH0pO1xuICpcbiAqIC8vIFNjaGVkdWxlIGEgaGlnaC1wcmlvcml0eSB0YXNrXG4gKiBzY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xuICogICAgIGNvbnNvbGUuZGVidWcoJ0hpZ2gtcHJpb3JpdHkgdGFzayBleGVjdXRlZC4nKTtcbiAqIH0sIHsgcHJpb3JpdHk6IDEwIH0pO1xuICpcbiAqIC8vIFN0YXJ0IGEgYmF0Y2hpbmcgY29udGV4dFxuICogc2NoZWR1bGVyLnN0YXJ0QmF0Y2goKTtcbiAqXG4gKiAvLyBTY2hlZHVsZSB0YXNrcyB3aXRoaW4gdGhlIGJhdGNoXG4gKiBzY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xuICogICAgIGNvbnNvbGUuZGVidWcoJ1Rhc2sgd2l0aGluIGJhdGNoLicpO1xuICogfSk7XG4gKlxuICogLy8gRW5kIHRoZSBiYXRjaGluZyBjb250ZXh0IHRvIHByb2Nlc3MgdGFza3NcbiAqIHNjaGVkdWxlci5lbmRCYXRjaCgpO1xuICpcbiAqIC8vIEZsdXNoIHBlbmRpbmcgdGFza3MgaW1tZWRpYXRlbHlcbiAqIHNjaGVkdWxlci5mbHVzaCgpO1xuICpcbiAqIC8vIFNodXRkb3duIHRoZSBzY2hlZHVsZXJcbiAqIHNjaGVkdWxlci5zaHV0ZG93bigpO1xuICovXG5leHBvcnQgY2xhc3MgQmF0Y2hTY2hlZHVsZXIge1xuICAgIC8qKlxuICAgICAqIFNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgQmF0Y2hTY2hlZHVsZXIuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEJhdGNoU2NoZWR1bGVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBEZXB0aCBvZiB0aGUgY3VycmVudCBiYXRjaGluZyBjb250ZXh0LlxuICAgICAqL1xuICAgIHByaXZhdGUgYmF0Y2hEZXB0aCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBRdWV1ZSBvZiB0YXNrcyBzY2hlZHVsZWQgZm9yIGV4ZWN1dGlvbi5cbiAgICAgKi9cbiAgICBwcml2YXRlIHRhc2tRdWV1ZTogU2NoZWR1bGVkVGFza1tdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdGFzayBxdWV1ZSBpcyBzY2hlZHVsZWQgZm9yIHByb2Nlc3NpbmcuXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1NjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNjaGVkdWxlciBpcyBzaHV0dGluZyBkb3duLlxuICAgICAqL1xuICAgIHByaXZhdGUgaXNTaHV0dGluZ0Rvd24gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgYmF0Y2ggcHJvbWlzZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgY3VycmVudEJhdGNoUHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGwgPSBudWxsO1xuXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgQmF0Y2hTY2hlZHVsZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7QmF0Y2hTY2hlZHVsZXJ9IFRoZSBzaW5nbGV0b24gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHNjaGVkdWxlciA9IEJhdGNoU2NoZWR1bGVyLmdldEluc3RhbmNlKCk7XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBCYXRjaFNjaGVkdWxlciB7XG4gICAgICAgIGlmIChCYXRjaFNjaGVkdWxlci5pbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgQmF0Y2hTY2hlZHVsZXIuaW5zdGFuY2UgPSBuZXcgQmF0Y2hTY2hlZHVsZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCYXRjaFNjaGVkdWxlci5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYSB0YXNrIGZvciBleGVjdXRpb24uIFN1cHBvcnRzIHRhc2sgcHJpb3JpdGl6YXRpb24sIGNhbmNlbGxhdGlvbiwgYW5kIGVycm9yIGhhbmRsaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtUYXNrRnVuY3Rpb259IHRhc2sgLSBUaGUgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICogQHBhcmFtIHtUYXNrT3B0aW9uc30gW29wdGlvbnM9e31dIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSB0YXNrLlxuICAgICAqXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBzY2hlZHVsZXIgaXMgc2h1dHRpbmcgZG93bi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2NoZWR1bGUgYSBzaW1wbGUgdGFza1xuICAgICAqIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XG4gICAgICogICAgIGNvbnNvbGUuZGVidWcoJ1Rhc2sgZXhlY3V0ZWQuJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFNjaGVkdWxlIGEgdGFzayB3aXRoIGhpZ2ggcHJpb3JpdHlcbiAgICAgKiBzY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xuICAgICAqICAgICBjb25zb2xlLmRlYnVnKCdIaWdoLXByaW9yaXR5IHRhc2sgZXhlY3V0ZWQuJyk7XG4gICAgICogfSwgeyBwcmlvcml0eTogNSB9KTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2NoZWR1bGUgYSB0YXNrIHdpdGggYW4gZXJyb3IgaGFuZGxlclxuICAgICAqIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XG4gICAgICogICAgIHRocm93IG5ldyBFcnJvcignVGFzayBlcnJvcicpO1xuICAgICAqIH0sIHtcbiAgICAgKiAgICAgb25FcnJvcjogKGVycm9yKSA9PiB7XG4gICAgICogICAgICAgICBjb25zb2xlLmVycm9yKCdIYW5kbGVkIHRhc2sgZXJyb3I6JywgZXJyb3IpO1xuICAgICAqICAgICB9LFxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBTY2hlZHVsZSBhIHRhc2sgd2l0aCBhIGNhbmNlbGxhdGlvbiB0b2tlblxuICAgICAqIGNvbnN0IHRva2VuID0gc2NoZWR1bGVyLmNyZWF0ZUNhbmNlbGxhdGlvblRva2VuKCk7XG4gICAgICogc2NoZWR1bGVyLnNjaGVkdWxlKCgpID0+IHtcbiAgICAgKiAgICAgY29uc29sZS5kZWJ1ZygnVGhpcyB0YXNrIG1heSBiZSBjYW5jZWxsZWQuJyk7XG4gICAgICogfSwgeyBjYW5jZWxsYXRpb25Ub2tlbjogdG9rZW4gfSk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRhc2sgYmVmb3JlIGl0IGV4ZWN1dGVzXG4gICAgICogdG9rZW4uY2FuY2VsKCk7XG4gICAgICovXG4gICAgcHVibGljIHNjaGVkdWxlKHRhc2s6IFRhc2tGdW5jdGlvbiwgb3B0aW9uczogVGFza09wdGlvbnMgPSB7fSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc1NodXR0aW5nRG93bikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2NoZWR1bGUgdGFza3MgYWZ0ZXIgc2h1dGRvd24gaGFzIGJlZW4gaW5pdGlhdGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCAnYW5vbnltb3VzJztcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBwcmlvcml0eSA9IDAsXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgY2FuY2VsbGF0aW9uVG9rZW46IHRva2VuLFxuICAgICAgICAgICAgbmFtZSA9ICdhbm9ueW1vdXMnLFxuICAgICAgICB9ID0gb3B0aW9ucztcblxuICAgICAgICB0aGlzLnRhc2tRdWV1ZS5wdXNoKHsgdGFzaywgcHJpb3JpdHksIG9uRXJyb3IsIHRva2VuIH0pO1xuICAgICAgICBkZWJ1Z0xvZyhgVGFzayBzY2hlZHVsZWQ6ICR7bmFtZX0gKHByaW9yaXR5OiAke3ByaW9yaXR5fSlgKTtcbiAgICAgICAgLy8gU29ydCB0aGUgdGFzayBxdWV1ZSBieSBwcmlvcml0eSBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAgICB0aGlzLnRhc2tRdWV1ZS5zb3J0KChhLCBiKSA9PiBiLnByaW9yaXR5IC0gYS5wcmlvcml0eSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzU2NoZWR1bGVkICYmIHRoaXMuYmF0Y2hEZXB0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5pc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QmF0Y2hQcm9taXNlID0gdGhpcy5wcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmVnaW5zIGEgbmV3IGJhdGNoaW5nIGNvbnRleHQuIFRhc2tzIHNjaGVkdWxlZCB3aXRoaW4gdGhpcyBjb250ZXh0XG4gICAgICogd2lsbCBiZSBkZWZlcnJlZCB1bnRpbCB0aGUgYmF0Y2ggZW5kcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogc2NoZWR1bGVyLnN0YXJ0QmF0Y2goKTtcbiAgICAgKiAvLyBTY2hlZHVsZSB0YXNrcyB3aXRoaW4gdGhlIGJhdGNoXG4gICAgICogc2NoZWR1bGVyLnNjaGVkdWxlKCgpID0+IHtcbiAgICAgKiAgICAgY29uc29sZS5kZWJ1ZygnVGFzayB3aXRoaW4gYmF0Y2guJyk7XG4gICAgICogfSk7XG4gICAgICogLy8gRW5kIHRoZSBiYXRjaGluZyBjb250ZXh0XG4gICAgICogc2NoZWR1bGVyLmVuZEJhdGNoKCk7XG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0QmF0Y2goKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYmF0Y2hEZXB0aCsrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuZHMgdGhlIGN1cnJlbnQgYmF0Y2hpbmcgY29udGV4dC4gSWYgYWxsIGJhdGNoaW5nIGNvbnRleHRzIGhhdmUgZW5kZWQsXG4gICAgICogcGVuZGluZyB0YXNrcyB3aWxsIGJlIHByb2Nlc3NlZC5cbiAgICAgKlxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBubyBiYXRjaGluZyBjb250ZXh0IHRvIGVuZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gQXNzdW1pbmcgYSBiYXRjaGluZyBjb250ZXh0IGhhcyBiZWVuIHN0YXJ0ZWRcbiAgICAgKiBzY2hlZHVsZXIuZW5kQmF0Y2goKTtcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5kQmF0Y2goKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmJhdGNoRGVwdGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYmF0Y2ggdG8gZW5kLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iYXRjaERlcHRoLS07XG5cbiAgICAgICAgaWYgKHRoaXMuYmF0Y2hEZXB0aCA9PT0gMCAmJiB0aGlzLnRhc2tRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBkZWJ1Z0xvZyhgQmF0Y2ggZW5kZWQsIHByb2Nlc3NpbmcgdGFza3MgKCR7dGhpcy50YXNrUXVldWUubGVuZ3RofSlgKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJhdGNoUHJvbWlzZSA9IHRoaXMucHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgdGhlIHRhc2sgcXVldWUsIGV4ZWN1dGluZyB0YXNrcyBpbiBvcmRlciBvZiBwcmlvcml0eS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHByb2Nlc3NRdWV1ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5pc1NjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLmJhdGNoRGVwdGggPiAwIHx8IHRoaXMuaXNTaHV0dGluZ0Rvd24pIHtcbiAgICAgICAgICAgIGRlYnVnTG9nKFwiQmF0Y2ggZGVwdGggaXMgZ3JlYXRlciB0aGFuIDAgb3Igc2h1dHRpbmcgZG93biwgcmV0dXJuaW5nXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFza3NUb1Byb2Nlc3MgPSB0aGlzLnRhc2tRdWV1ZTtcbiAgICAgICAgdGhpcy50YXNrUXVldWUgPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IHNjaGVkdWxlZFRhc2sgb2YgdGFza3NUb1Byb2Nlc3MpIHtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWRUYXNrLnRva2VuPy5pc0NhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgIGRlYnVnTG9nKFwiVGFzayBpcyBjYW5jZWxsZWQsIHNraXBwaW5nXCIpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHNjaGVkdWxlZFRhc2sudGFzaygpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHRhc2sgcmV0dXJucyBhIHByb21pc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgaXRcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWRUYXNrLnByb21pc2UgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2coYFRhc2sgY29tcGxldGVkOiAke3NjaGVkdWxlZFRhc2submFtZX1gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3Igc3luY2hyb25vdXMgdGFza3MsIHdlIGNyZWF0ZSBhIHJlc29sdmVkIHByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkVGFzay5wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z0xvZyhgVGFzayBmYWlsZWQ6ICR7c2NoZWR1bGVkVGFzay5uYW1lfWApO1xuICAgICAgICAgICAgICAgIGlmIChzY2hlZHVsZWRUYXNrLm9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlZFRhc2sub25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9ySW5IYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBvbkVycm9yIGhhbmRsZXI6JywgZXJyb3JJbkhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gYmF0Y2hlZCB0YXNrOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50YXNrUXVldWUubGVuZ3RoID4gMCAmJiB0aGlzLmJhdGNoRGVwdGggPT09IDApIHtcbiAgICAgICAgICAgIGRlYnVnTG9nKFwiVGFzayBxdWV1ZSBpcyBub3QgZW1wdHksIHNjaGVkdWxpbmcgbmV4dCBiYXRjaFwiKTtcbiAgICAgICAgICAgIHRoaXMuaXNTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4gdGhpcy5wcm9jZXNzUXVldWUoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGFsbCBwZW5kaW5nIHRhc2tzIGFuZCBwcmV2ZW50cyBuZXcgdGFza3MgZnJvbSBiZWluZyBzY2hlZHVsZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHNjaGVkdWxlci5zaHV0ZG93bigpO1xuICAgICAqL1xuICAgIHB1YmxpYyBzaHV0ZG93bigpOiB2b2lkIHtcbiAgICAgICAgZGVidWdMb2coJ1NodXR0aW5nIGRvd24gc2NoZWR1bGVyJyk7XG4gICAgICAgIHRoaXMuaXNTaHV0dGluZ0Rvd24gPSB0cnVlO1xuICAgICAgICB0aGlzLnRhc2tRdWV1ZSA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltbWVkaWF0ZWx5IHByb2Nlc3NlcyBhbGwgcGVuZGluZyB0YXNrcyBpbiB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgY2FsbGVkIHdpdGhpbiBhIGJhdGNoaW5nIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHNjaGVkdWxlci5mbHVzaCgpO1xuICAgICAqL1xuICAgIHB1YmxpYyBmbHVzaCgpOiB2b2lkIHtcbiAgICAgICAgZGVidWdMb2coJ0ZsdXNoaW5nIHNjaGVkdWxlcicpO1xuICAgICAgICBpZiAodGhpcy5iYXRjaERlcHRoID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmx1c2ggd2hpbGUgaW4gYSBiYXRjaGluZyBjb250ZXh0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJpZ2dlciBjb21wbGV0aW9uIG9mIGN1cnJlbnQgYmF0Y2ggd2l0aG91dCBibG9ja2luZ1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50QmF0Y2hQcm9taXNlKSB7XG4gICAgICAgICAgICBkZWJ1Z0xvZygnQ29tcGxldGluZyBjdXJyZW50IGJhdGNoJyk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRCYXRjaFByb21pc2UuZmluYWxseSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcm9jZXNzIGFueSByZW1haW5pbmcgdGFza3Mgd2l0aG91dCBibG9ja2luZ1xuICAgICAgICBpZiAodGhpcy50YXNrUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZGVidWdMb2coJ1Byb2Nlc3NpbmcgcmVtYWluaW5nIHRhc2tzJyk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRCYXRjaFByb21pc2UgPSB0aGlzLnByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50QmF0Y2hQcm9taXNlLmZpbmFsbHkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjYW5jZWxsYXRpb24gdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgYSBzY2hlZHVsZWQgdGFzay5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtDYW5jZWxsYXRpb25Ub2tlbn0gQSBuZXcgY2FuY2VsbGF0aW9uIHRva2VuLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCB0b2tlbiA9IHNjaGVkdWxlci5jcmVhdGVDYW5jZWxsYXRpb25Ub2tlbigpO1xuICAgICAqIHNjaGVkdWxlci5zY2hlZHVsZSgoKSA9PiB7XG4gICAgICogICAgIGNvbnNvbGUuZGVidWcoJ1RoaXMgdGFzayBtYXkgYmUgY2FuY2VsbGVkLicpO1xuICAgICAqIH0sIHsgY2FuY2VsbGF0aW9uVG9rZW46IHRva2VuIH0pO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0YXNrIGJlZm9yZSBpdCBleGVjdXRlc1xuICAgICAqIHRva2VuLmNhbmNlbCgpO1xuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVDYW5jZWxsYXRpb25Ub2tlbigpOiBDYW5jZWxsYXRpb25Ub2tlbiB7XG4gICAgICAgIGxldCBpc0NhbmNlbGxlZCA9IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IGlzQ2FuY2VsbGVkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0NhbmNlbGxlZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIEV4ZWN1dGVzIGEgZnVuY3Rpb24gd2l0aGluIGEgYmF0Y2hpbmcgY29udGV4dC4gVGFza3Mgc2NoZWR1bGVkIHdpdGhpbiB0aGUgZnVuY3Rpb25cbiAqIHdpbGwgYmUgZGVmZXJyZWQgdW50aWwgdGhlIGJhdGNoIGVuZHMuXG4gKlxuICogQHBhcmFtIHsoKSA9PiBUfSBmbiAtIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlLlxuICpcbiAqIEByZXR1cm5zIHtUfSBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBleGVjdXRlZCBmdW5jdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICpcbiAqIEBleGFtcGxlXG4gKiBiYXRjaFVwZGF0ZXMoKCkgPT4ge1xuICogICAgIC8vIFNjaGVkdWxlIHRhc2tzIHdpdGhpbiB0aGUgYmF0Y2hcbiAqICAgICBzY2hlZHVsZXIuc2NoZWR1bGUoKCkgPT4ge1xuICogICAgICAgICBjb25zb2xlLmRlYnVnKCdUYXNrIHdpdGhpbiBiYXRjaC4nKTtcbiAqICAgICB9KTtcbiAqICAgICAvLyBPdGhlciBzeW5jaHJvbm91cyBvcGVyYXRpb25zXG4gKiAgICAgY29uc29sZS5kZWJ1ZygnQmF0Y2hpbmcgb3BlcmF0aW9ucyBjb21wbGV0ZS4nKTtcbiAqIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gYmF0Y2hVcGRhdGVzPFQ+KGZuOiAoKSA9PiBUKTogVCB7XG4gICAgY29uc3Qgc2NoZWR1bGVyID0gQmF0Y2hTY2hlZHVsZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBkZWJ1Z0xvZygnU3RhcnRpbmcgYmF0Y2guLi4nKTtcbiAgICBzY2hlZHVsZXIuc3RhcnRCYXRjaCgpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2NoZWR1bGVyLmVuZEJhdGNoKCk7XG4gICAgICAgIGRlYnVnTG9nKCdCYXRjaCBlbmRlZC4nKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/batch-scheduler.ts\n");

/***/ }),

/***/ "./src/dev.ts":
/*!********************!*\
  !*** ./src/dev.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   debugLog: () => (/* binding */ debugLog),\n/* harmony export */   isDev: () => (/* binding */ isDev),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\nconst isDev = true;\nfunction assert(condition, message) {\n    if ( true && !condition) {\n        throw new Error(message);\n    }\n}\nfunction warn(message) {\n    if (true) {\n        console.warn(`[${\"@avatijs/batch-scheduler\"}]: ${message}`);\n    }\n}\nfunction debugLog(message, ...args) {\n    if (true) {\n        const now = new Date();\n        // @ts-ignore\n        const timeWithMs = now.toISOString().split('T')[1].slice(0, -1);\n        console.log(`${timeWithMs} [${\"@avatijs/batch-scheduler\"}@${\"0.1.0\"}]: ${message}`, ...args);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGV2LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7SUFLSTtBQVlHLE1BQU0sS0FBSyxHQUFHLElBQU8sQ0FBQztBQUV0QixTQUFTLE1BQU0sQ0FBQyxTQUFjLEVBQUUsT0FBZTtJQUNsRCxJQUFJLEtBQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0IsQ0FBQztBQUNMLENBQUM7QUFFTSxTQUFTLElBQUksQ0FBQyxPQUFlO0lBQ2hDLElBQUksSUFBTyxFQUFFLENBQUM7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksMEJBQWdCLE1BQU0sT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0FBQ0wsQ0FBQztBQUVNLFNBQVMsUUFBUSxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVc7SUFDcEQsSUFBSSxJQUFzQixFQUFFLENBQUM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN2QixhQUFhO1FBQ2IsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsS0FBSywwQkFBZ0IsSUFBSSxPQUFXLE1BQU0sT0FBTyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMzRixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0F2YXRpLy4vc3JjL2Rldi50cz9iODhlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDI0IEtoYWxlZCBTYW1lZXIgPGtoYWxlZC5zbXFAaG90bWFpbC5jb20+LlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICoqL1xuXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBsZXQgX19ERVZfXzogYm9vbGVhbjtcbiAgICBsZXQgX19TSUxFTlRfXzogYm9vbGVhbjtcbiAgICBsZXQgX19WRVJTSU9OX186IHN0cmluZztcbiAgICBsZXQgX19QQUNLQUdFX05BTUVfXzogc3RyaW5nO1xuICAgIGxldCBfX1RFU1RfXzogYm9vbGVhbjtcbiAgICBsZXQgX19CUk9XU0VSX186IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBpc0RldiA9IF9fREVWX187XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uOiBhbnksIG1lc3NhZ2U6IHN0cmluZyk6IGFzc2VydHMgY29uZGl0aW9uIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgWyR7X19QQUNLQUdFX05BTUVfX31dOiAke21lc3NhZ2V9YCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVidWdMb2cobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmIChfX0RFVl9fICYmICFfX1NJTEVOVF9fKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgdGltZVdpdGhNcyA9IG5vdy50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMV0uc2xpY2UoMCwgLTEpO1xuICAgICAgICBjb25zb2xlLmxvZyhgJHt0aW1lV2l0aE1zfSBbJHtfX1BBQ0tBR0VfTkFNRV9ffUAke19fVkVSU0lPTl9ffV06ICR7bWVzc2FnZX1gLCAuLi5hcmdzKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/dev.ts\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchScheduler: () => (/* reexport safe */ _batch_scheduler__WEBPACK_IMPORTED_MODULE_0__.BatchScheduler),\n/* harmony export */   batchUpdates: () => (/* reexport safe */ _batch_scheduler__WEBPACK_IMPORTED_MODULE_0__.batchUpdates)\n/* harmony export */ });\n/* harmony import */ var _batch_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batch-scheduler */ \"./src/batch-scheduler.ts\");\n/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7O0lBS0k7QUFFNkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdmF0aS8uL3NyYy9pbmRleC50cz9mZmI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDI0IEtoYWxlZCBTYW1lZXIgPGtoYWxlZC5zbXFAaG90bWFpbC5jb20+LlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICoqL1xuXG5leHBvcnQgeyBiYXRjaFVwZGF0ZXMsIEJhdGNoU2NoZWR1bGVyIH0gZnJvbSAnLi9iYXRjaC1zY2hlZHVsZXInO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});