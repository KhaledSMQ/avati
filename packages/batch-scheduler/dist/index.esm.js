/*!
 * @avati/batch-scheduler 0.1.0
 * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit https://avati.io/ for details.
 */

/* eslint-disable */

/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./src/batch-scheduler.ts":
/*!********************************!*\
  !*** ./src/batch-scheduler.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchScheduler: () => (/* binding */ BatchScheduler),\n/* harmony export */   batchUpdates: () => (/* binding */ batchUpdates)\n/* harmony export */ });\n/* harmony import */ var _dev__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dev */ \"./src/dev.ts\");\n/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n/**\n * BatchScheduler is responsible for managing and executing tasks in batches.\n * It supports task prioritization, cancellation, error handling, and batching contexts.\n *\n * @example\n * // Retrieve the singleton instance\n * const scheduler = BatchScheduler.getInstance();\n *\n * // Schedule a task\n * scheduler.schedule(() => {\n *     console.debug('Task executed.');\n * });\n *\n * // Schedule a high-priority task\n * scheduler.schedule(() => {\n *     console.debug('High-priority task executed.');\n * }, { priority: 10 });\n *\n * // Start a batching context\n * scheduler.startBatch();\n *\n * // Schedule tasks within the batch\n * scheduler.schedule(() => {\n *     console.debug('Task within batch.');\n * });\n *\n * // End the batching context to process tasks\n * scheduler.endBatch();\n *\n * // Flush pending tasks immediately\n * scheduler.flush();\n *\n * // Shutdown the scheduler\n * scheduler.shutdown();\n */\nclass BatchScheduler {\n    constructor() {\n        /**\n         * Depth of the current batching context.\n         */\n        this.batchDepth = 0;\n        /**\n         * Queue of tasks scheduled for execution.\n         */\n        this.taskQueue = [];\n        /**\n         * Indicates whether the task queue is scheduled for processing.\n         */\n        this.isScheduled = false;\n        /**\n         * Indicates whether the scheduler is shutting down.\n         */\n        this.isShuttingDown = false;\n        /**\n         * Current batch promise.\n         * @private\n         */\n        this.currentBatchPromise = null;\n    }\n    /**\n     * Retrieves the singleton instance of the BatchScheduler.\n     *\n     * @returns {BatchScheduler} The singleton instance.\n     *\n     * @example\n     * const scheduler = BatchScheduler.getInstance();\n     */\n    static getInstance() {\n        if (BatchScheduler.instance === null) {\n            BatchScheduler.instance = new BatchScheduler();\n        }\n        return BatchScheduler.instance;\n    }\n    /**\n     * Schedules a task for execution. Supports task prioritization, cancellation, and error handling.\n     *\n     * @param {TaskFunction} task - The function to be executed.\n     * @param {TaskOptions} [options={}] - Optional settings for the task.\n     *\n     * @throws {Error} If the scheduler is shutting down.\n     *\n     * @example\n     * // Schedule a simple task\n     * scheduler.schedule(() => {\n     *     console.debug('Task executed.');\n     * });\n     *\n     * @example\n     * // Schedule a task with high priority\n     * scheduler.schedule(() => {\n     *     console.debug('High-priority task executed.');\n     * }, { priority: 5 });\n     *\n     * @example\n     * // Schedule a task with an error handler\n     * scheduler.schedule(() => {\n     *     throw new Error('Task error');\n     * }, {\n     *     onError: (error) => {\n     *         console.error('Handled task error:', error);\n     *     },\n     * });\n     *\n     * @example\n     * // Schedule a task with a cancellation token\n     * const token = scheduler.createCancellationToken();\n     * scheduler.schedule(() => {\n     *     console.debug('This task may be cancelled.');\n     * }, { cancellationToken: token });\n     *\n     * // Cancel the task before it executes\n     * token.cancel();\n     */\n    schedule(task, options = {}) {\n        if (this.isShuttingDown) {\n            throw new Error('Cannot schedule tasks after shutdown has been initiated.');\n        }\n        options.name = options.name || 'anonymous';\n        const { priority = 0, onError, cancellationToken: token, name = 'anonymous', } = options;\n        this.taskQueue.push({ task, priority, onError, token });\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Task scheduled: ${name} (priority: ${priority})`);\n        // Sort the task queue by priority in descending order.\n        this.taskQueue.sort((a, b) => b.priority - a.priority);\n        if (!this.isScheduled && this.batchDepth === 0) {\n            this.isScheduled = true;\n            queueMicrotask(() => {\n                this.currentBatchPromise = this.processQueue();\n            });\n        }\n    }\n    /**\n     * Begins a new batching context. Tasks scheduled within this context\n     * will be deferred until the batch ends.\n     *\n     * @example\n     * scheduler.startBatch();\n     * // Schedule tasks within the batch\n     * scheduler.schedule(() => {\n     *     console.debug('Task within batch.');\n     * });\n     * // End the batching context\n     * scheduler.endBatch();\n     */\n    startBatch() {\n        this.batchDepth++;\n    }\n    /**\n     * Ends the current batching context. If all batching contexts have ended,\n     * pending tasks will be processed.\n     *\n     * @throws {Error} If there is no batching context to end.\n     *\n     * @example\n     * // Assuming a batching context has been started\n     * scheduler.endBatch();\n     */\n    endBatch() {\n        if (this.batchDepth === 0) {\n            throw new Error('No batch to end.');\n        }\n        this.batchDepth--;\n        if (this.batchDepth === 0 && this.taskQueue.length > 0) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Batch ended, processing tasks (${this.taskQueue.length})`);\n            this.currentBatchPromise = this.processQueue();\n        }\n    }\n    /**\n     * Processes the task queue, executing tasks in order of priority.\n     */\n    async processQueue() {\n        var _a;\n        this.isScheduled = false;\n        if (this.batchDepth > 0 || this.isShuttingDown) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(\"Batch depth is greater than 0 or shutting down, returning\");\n            return;\n        }\n        const tasksToProcess = this.taskQueue;\n        this.taskQueue = [];\n        for (const scheduledTask of tasksToProcess) {\n            if ((_a = scheduledTask.token) === null || _a === void 0 ? void 0 : _a.isCancelled) {\n                (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(\"Task is cancelled, skipping\");\n                continue;\n            }\n            try {\n                const result = scheduledTask.task();\n                // If the task returns a promise, we need to wait for it\n                if (result instanceof Promise) {\n                    scheduledTask.promise = result;\n                    await result;\n                    (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Task completed: ${scheduledTask.name}`);\n                }\n                else {\n                    // For synchronous tasks, we create a resolved promise\n                    scheduledTask.promise = Promise.resolve();\n                }\n            }\n            catch (error) {\n                (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(`Task failed: ${scheduledTask.name}`);\n                if (scheduledTask.onError) {\n                    try {\n                        scheduledTask.onError(error);\n                    }\n                    catch (errorInHandler) {\n                        console.error('Error in onError handler:', errorInHandler);\n                    }\n                }\n                else {\n                    console.error('Error in batched task:', error);\n                }\n            }\n        }\n        if (this.taskQueue.length > 0 && this.batchDepth === 0) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)(\"Task queue is not empty, scheduling next batch\");\n            this.isScheduled = true;\n            queueMicrotask(() => this.processQueue());\n        }\n    }\n    /**\n     * Cancels all pending tasks and prevents new tasks from being scheduled.\n     *\n     * @example\n     * scheduler.shutdown();\n     */\n    shutdown() {\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Shutting down scheduler');\n        this.isShuttingDown = true;\n        this.taskQueue = [];\n    }\n    /**\n     * Immediately processes all pending tasks in the queue.\n     *\n     * @throws {Error} If called within a batching context.\n     *\n     * @example\n     * scheduler.flush();\n     */\n    flush() {\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Flushing scheduler');\n        if (this.batchDepth > 0) {\n            throw new Error('Cannot flush while in a batching context.');\n        }\n        // Trigger completion of current batch without blocking\n        if (this.currentBatchPromise) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Completing current batch');\n            this.currentBatchPromise.finally();\n        }\n        // Process any remaining tasks without blocking\n        if (this.taskQueue.length > 0) {\n            (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Processing remaining tasks');\n            this.currentBatchPromise = this.processQueue();\n            this.currentBatchPromise.finally();\n        }\n    }\n    /**\n     * Creates a cancellation token that can be used to cancel a scheduled task.\n     *\n     * @returns {CancellationToken} A new cancellation token.\n     *\n     * @example\n     * const token = scheduler.createCancellationToken();\n     * scheduler.schedule(() => {\n     *     console.debug('This task may be cancelled.');\n     * }, { cancellationToken: token });\n     *\n     * // Cancel the task before it executes\n     * token.cancel();\n     */\n    createCancellationToken() {\n        let isCancelled = false;\n        return {\n            cancel: () => {\n                isCancelled = true;\n            },\n            get isCancelled() {\n                return isCancelled;\n            },\n        };\n    }\n}\n/**\n * Singleton instance of the BatchScheduler.\n */\nBatchScheduler.instance = null;\n/**\n * Executes a function within a batching context. Tasks scheduled within the function\n * will be deferred until the batch ends.\n *\n * @param {() => T} fn - The function to execute.\n *\n * @returns {T} The return value of the executed function.\n *\n * @template T\n *\n * @example\n * batchUpdates(() => {\n *     // Schedule tasks within the batch\n *     scheduler.schedule(() => {\n *         console.debug('Task within batch.');\n *     });\n *     // Other synchronous operations\n *     console.debug('Batching operations complete.');\n * });\n */\nfunction batchUpdates(fn) {\n    const scheduler = BatchScheduler.getInstance();\n    (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Starting batch...');\n    scheduler.startBatch();\n    try {\n        return fn();\n    }\n    finally {\n        scheduler.endBatch();\n        (0,_dev__WEBPACK_IMPORTED_MODULE_0__.debugLog)('Batch ended.');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/batch-scheduler.ts\n");

/***/ }),

/***/ "./src/dev.ts":
/*!********************!*\
  !*** ./src/dev.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   debugLog: () => (/* binding */ debugLog),\n/* harmony export */   isDev: () => (/* binding */ isDev),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\nconst isDev = true;\nfunction assert(condition, message) {\n    if ( true && !condition) {\n        throw new Error(message);\n    }\n}\nfunction warn(message) {\n    if (true) {\n        console.warn(`[${\"@avati/batch-scheduler\"}]: ${message}`);\n    }\n}\nfunction debugLog(message, ...args) {\n    if (true) {\n        const now = new Date();\n        // @ts-ignore\n        const timeWithMs = now.toISOString().split('T')[1].slice(0, -1);\n        console.log(`${timeWithMs} [${\"@avati/batch-scheduler\"}@${\"0.1.0\"}]: ${message}`, ...args);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGV2LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7SUFLSTtBQVlHLE1BQU0sS0FBSyxHQUFHLElBQU8sQ0FBQztBQUV0QixTQUFTLE1BQU0sQ0FBQyxTQUFjLEVBQUUsT0FBZTtJQUNsRCxJQUFJLEtBQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0IsQ0FBQztBQUNMLENBQUM7QUFFTSxTQUFTLElBQUksQ0FBQyxPQUFlO0lBQ2hDLElBQUksSUFBTyxFQUFFLENBQUM7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksd0JBQWdCLE1BQU0sT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0FBQ0wsQ0FBQztBQUVNLFNBQVMsUUFBUSxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVc7SUFDcEQsSUFBSSxJQUFzQixFQUFFLENBQUM7UUFDekIsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN2QixhQUFhO1FBQ2IsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsS0FBSyx3QkFBZ0IsSUFBSSxPQUFXLE1BQU0sT0FBTyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMzRixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BhdmF0aS9iYXRjaC1zY2hlZHVsZXIvLi9zcmMvZGV2LnRzP2I4OGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjQgS2hhbGVkIFNhbWVlciA8a2hhbGVkLnNtcUBob3RtYWlsLmNvbT4uXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKiovXG5cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGxldCBfX0RFVl9fOiBib29sZWFuO1xuICAgIGxldCBfX1NJTEVOVF9fOiBib29sZWFuO1xuICAgIGxldCBfX1ZFUlNJT05fXzogc3RyaW5nO1xuICAgIGxldCBfX1BBQ0tBR0VfTkFNRV9fOiBzdHJpbmc7XG4gICAgbGV0IF9fVEVTVF9fOiBib29sZWFuO1xuICAgIGxldCBfX0JST1dTRVJfXzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGlzRGV2ID0gX19ERVZfXztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChjb25kaXRpb246IGFueSwgbWVzc2FnZTogc3RyaW5nKTogYXNzZXJ0cyBjb25kaXRpb24ge1xuICAgIGlmIChfX0RFVl9fICYmICFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhcm4obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbJHtfX1BBQ0tBR0VfTkFNRV9ffV06ICR7bWVzc2FnZX1gKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z0xvZyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKF9fREVWX18gJiYgIV9fU0lMRU5UX18pIHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCB0aW1lV2l0aE1zID0gbm93LnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVsxXS5zbGljZSgwLCAtMSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke3RpbWVXaXRoTXN9IFske19fUEFDS0FHRV9OQU1FX199QCR7X19WRVJTSU9OX199XTogJHttZXNzYWdlfWAsIC4uLmFyZ3MpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/dev.ts\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchScheduler: () => (/* reexport safe */ _batch_scheduler__WEBPACK_IMPORTED_MODULE_0__.BatchScheduler),\n/* harmony export */   batchUpdates: () => (/* reexport safe */ _batch_scheduler__WEBPACK_IMPORTED_MODULE_0__.batchUpdates)\n/* harmony export */ });\n/* harmony import */ var _batch_scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batch-scheduler */ \"./src/batch-scheduler.ts\");\n/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7O0lBS0k7QUFFNkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYXZhdGkvYmF0Y2gtc2NoZWR1bGVyLy4vc3JjL2luZGV4LnRzP2ZmYjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjQgS2hhbGVkIFNhbWVlciA8a2hhbGVkLnNtcUBob3RtYWlsLmNvbT4uXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKiovXG5cbmV4cG9ydCB7IGJhdGNoVXBkYXRlcywgQmF0Y2hTY2hlZHVsZXIgfSBmcm9tICcuL2JhdGNoLXNjaGVkdWxlcic7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval-source-map devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ var __webpack_exports__BatchScheduler = __webpack_exports__.BatchScheduler;
/******/ var __webpack_exports__batchUpdates = __webpack_exports__.batchUpdates;
/******/ export { __webpack_exports__BatchScheduler as BatchScheduler, __webpack_exports__batchUpdates as batchUpdates };
/******/ 
