/*!
 * @avatijs/batch-scheduler 0.1.0
 * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>
 * Licensed under MIT, https://opensource.org/licenses/MIT/
 * Please visit https://avati.io/ for details.
 */var t={d:(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{u:()=>r,r:()=>i});function s(t,...e){0}class r{constructor(){this.batchDepth=0,this.taskQueue=[],this.isScheduled=!1,this.isShuttingDown=!1,this.currentBatchPromise=null}static getInstance(){return null===r.instance&&(r.instance=new r),r.instance}schedule(t,e={}){if(this.isShuttingDown)throw Error("Cannot schedule tasks after shutdown has been initiated.");e.name=e.name||"anonymous";const{priority:r=0,onError:i,cancellationToken:n,name:h="anonymous"}=e;this.taskQueue.push({task:t,priority:r,onError:i,token:n}),s(),this.taskQueue.sort(((t,e)=>e.priority-t.priority)),this.isScheduled||0!==this.batchDepth||(this.isScheduled=!0,queueMicrotask((()=>{this.currentBatchPromise=this.processQueue()})))}startBatch(){this.batchDepth++}endBatch(){if(0===this.batchDepth)throw Error("No batch to end.");this.batchDepth--,0===this.batchDepth&&this.taskQueue.length>0&&(s(),this.currentBatchPromise=this.processQueue())}async processQueue(){var t;if(this.isScheduled=!1,this.batchDepth>0||this.isShuttingDown)return void s();const e=this.taskQueue;this.taskQueue=[];for(const r of e)if(null===(t=r.token)||void 0===t?void 0:t.isCancelled)s();else try{const t=r.task();t instanceof Promise?(r.promise=t,await t,s()):r.promise=Promise.resolve()}catch(t){if(s(),r.onError)try{r.onError(t)}catch(t){console.error("Error in onError handler:",t)}else console.error("Error in batched task:",t)}this.taskQueue.length>0&&0===this.batchDepth&&(s(),this.isScheduled=!0,queueMicrotask((()=>this.processQueue())))}shutdown(){s(),this.isShuttingDown=!0,this.taskQueue=[]}flush(){if(s(),this.batchDepth>0)throw Error("Cannot flush while in a batching context.");this.currentBatchPromise&&(s(),this.currentBatchPromise.finally()),this.taskQueue.length>0&&(s(),this.currentBatchPromise=this.processQueue(),this.currentBatchPromise.finally())}createCancellationToken(){let t=!1;return{cancel:()=>{t=!0},get isCancelled(){return t}}}}function i(t){const e=r.getInstance();s(),e.startBatch();try{return t()}finally{e.endBatch(),s()}}r.instance=null;var n=e.u,h=e.r;export{n as BatchScheduler,h as batchUpdates};
//# sourceMappingURL=index.esm.min.js.map