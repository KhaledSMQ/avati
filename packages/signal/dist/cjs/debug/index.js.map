{"version":3,"file":"debug/index.js","mappings":"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","sources":["webpack://@avatijs/signal/webpack/bootstrap","webpack://@avatijs/signal/webpack/runtime/define property getters","webpack://@avatijs/signal/webpack/runtime/hasOwnProperty shorthand","webpack://@avatijs/signal/webpack/runtime/make namespace object","webpack://@avatijs/signal/./src/core/updateQueue.ts","webpack://@avatijs/signal/./src/core/computation.ts","webpack://@avatijs/signal/./src/core/context.ts","webpack://@avatijs/signal/./src/core/effect.ts","webpack://@avatijs/signal/./src/debug/debug.ts","webpack://@avatijs/signal/./src/debug/signalMonitor.ts","webpack://@avatijs/signal/./src/core/errors.ts","webpack://@avatijs/signal/./src/core/base.ts","webpack://@avatijs/signal/./src/core/SubscriptionComputation.ts","webpack://@avatijs/signal/./src/core/signal.ts","webpack://@avatijs/signal/./src/core/computedSignal.ts","webpack://@avatijs/signal/./src/debug/utility.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { IComputation } from './interfaces';\n\n/**\n * Manages the scheduling and processing of signal updates\n * Uses a topological sort to handle updates in the correct order\n */\nexport class UpdateQueue {\n    private static instance: UpdateQueue;\n    private queue = new Set<IComputation>();\n    private processing = false;\n    private updateDepth = 0;\n    private maxUpdateDepth = 1000; // Configurable maximum update depth\n\n    static getInstance(): UpdateQueue {\n        if (!this.instance) {\n            this.instance = new UpdateQueue();\n        }\n        return this.instance;\n    }\n\n    /**\n     * Schedule a computation for update\n     */\n    schedule(computation: IComputation): void {\n        if (this.updateDepth >= this.maxUpdateDepth) {\n            throw new Error('Maximum update depth exceeded - possible circular dependency');\n        }\n\n        this.queue.add(computation);\n        if (!this.processing) {\n            this.processQueue();\n        }\n    }\n\n    /**\n     * Process all scheduled updates in dependency order\n     */\n    private processQueue(): void {\n        this.processing = true;\n        this.updateDepth++;\n\n        try {\n            while (this.queue.size > 0) {\n                const computations = Array.from(this.queue);\n                this.queue.clear();\n\n                // Sort by dependency depth to ensure correct update order\n                computations.sort((a, b) => a.getDepth() - b.getDepth());\n\n                for (const computation of computations) {\n                    if (computation.isDirty() && !computation.isDisposed()) {\n                        computation.recompute();\n                    }\n                }\n            }\n        } finally {\n            this.processing = false;\n            this.updateDepth--;\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Disposable, IComputation, type WritableSignal } from './interfaces';\nimport { UpdateQueue } from './updateQueue';\n\n/**\n * Base class for managing reactive computations\n */\nexport abstract class Computation implements Disposable, IComputation {\n    protected dirty = true;\n    protected disposed = false;\n    protected dependencies = new Set<WritableSignal<any>>();\n    protected dependents = new Set<Computation>();\n    protected depth = 0;\n    protected name?: string;\n\n    abstract recompute(): void;\n\n    constructor(name?: string) {\n        this.name = name;\n    }\n\n\n    /**\n     * Add a dependency to this computation\n     */\n    addDependency(signal: WritableSignal<any>): void {\n        if (!this.dependencies.has(signal)) {\n            this.dependencies.add(signal);\n            if (signal.constructor.name == 'ComputedSignal') {\n                this.updateDepth();\n            }\n        }\n    }\n\n    /**\n     * Remove a dependency from this computation\n     */\n    removeDependency(signal: WritableSignal<any>): void {\n        if (this.dependencies.delete(signal)) {\n            this.updateDepth();\n        }\n    }\n\n    /**\n     * Clean up computation resources\n     */\n    dispose(): void {\n        if (this.disposed) return;\n\n        this.disposed = true;\n        this.clearDependencies();\n        this.dependents.clear();\n    }\n\n    /**\n     * Check if computation is dirty\n     */\n    isDirty(): boolean {\n        return this.dirty;\n    }\n\n    /**\n     * Check if computation has been disposed\n     */\n    isDisposed(): boolean {\n        return this.disposed;\n    }\n\n    /**\n     * Add a dependent computation, which will be recomputed when this computation updates\n     */\n    getDepth(): number {\n        return this.depth;\n    }\n\n    /**\n     * Mark computation as dirty and schedule update\n     */\n    markDirty(): void {\n\n        if (!this.disposed) {\n            this.dirty = true;\n            UpdateQueue.getInstance().schedule(this);\n        }\n    }\n\n    /**\n     * Check if signal is a dependency of this computation\n     * @param signal\n     */\n    hasSignal(signal: WritableSignal<any>): boolean {\n        return this.dependencies.has(signal);\n    }\n\n    /**\n     * Clear all dependencies and update depth\n     */\n    clearDependencies(): void {\n        for (const dep of this.dependencies) {\n            dep.removeDependent(this);\n        }\n        this.dependencies.clear();\n        this.updateDepth();\n    }\n\n    /**\n     * Update the computation's depth in the dependency graph\n     */\n    updateDepth(): void {\n        const oldDepth = this.depth;\n        let maxDepth = 0;\n\n        for (const dep of this.dependencies) {\n            if (dep.constructor.name == 'ComputedSignal') {\n                // @ts-ignore TODO use concrete type\n                maxDepth = Math.max(maxDepth, dep.getDepth() + 1);\n            }\n        }\n\n        if (oldDepth !== maxDepth) {\n            this.depth = maxDepth;\n            // Propagate depth update to dependents\n            for (const dependent of this.dependents) {\n                dependent.updateDepth();\n            }\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Disposable, IComputation, IEffect, WritableSignal } from './interfaces';\n\n/**\n * Manages the global state and context of signal computations\n */\nexport class Context {\n    private static instance: Context;\n    private computationStack: IComputation[] = [];\n    private batchDepth = 0;\n    private batchQueue = new Set<WritableSignal<any>>();\n    private activeEffects = new Set<Disposable>();\n\n    static getInstance(): Context {\n        if (!this.instance) {\n            this.instance = new Context();\n        }\n        return this.instance;\n    }\n\n    getCurrentComputation(): IComputation | undefined {\n        return this.computationStack[this.computationStack.length - 1];\n    }\n\n    pushComputation(computation: IComputation): void {\n        // Check for circular dependencies\n        if (computation && this.computationStack.includes(computation)) {\n            // throw new CircularDependencyError();\n            return;\n        }\n        // we can push undefined to the stack\n        this.computationStack.push(computation);\n    }\n\n    popComputation(): void {\n        this.computationStack.pop();\n    }\n\n    isBatching(): boolean {\n        return this.batchDepth > 0;\n    }\n\n    beginBatch(): void {\n        this.batchDepth++;\n    }\n\n    endBatch(): void {\n        this.batchDepth--;\n        if (this.batchDepth === 0) {\n            this.flushBatchQueue();\n        }\n    }\n\n    addToBatchQueue(signal: WritableSignal<any>): void {\n        this.batchQueue.add(signal);\n    }\n\n    flushBatchQueue(): void {\n        // Create a new Set for unique signals\n        const uniqueSignals = new Set(this.batchQueue);\n        this.batchQueue.clear();\n\n        // Get all dependent computations\n        const computations = new Set<IComputation>();\n\n        for (const signal of uniqueSignals) {\n            for (const dependent of signal.getDependents()) {\n                computations.add(dependent);\n            }\n        }\n        // Mark all computations as dirty\n        for (const computation of computations) {\n            computation.markDirty();\n        }\n    }\n\n    setCurrentComputation(computation: IComputation): void {\n        this.computationStack[this.computationStack.length - 1] = computation;\n    }\n\n\n    registerEffect(effect: IEffect): void {\n        this.activeEffects.add(effect);\n    }\n\n    unregisterEffect(effect: IEffect): void {\n        this.activeEffects.delete(effect);\n    }\n\n    // Add this method to check if we're currently in an effect\n    isInEffect(): boolean {\n        return this.activeEffects.size > 0;\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { Disposable, IEffect } from './interfaces';\nimport { Computation } from './computation';\nimport { Context } from './context';\nimport { Cleanup, EffectFunction } from './types';\n\n\n/**\n * Implementation of reactive effects that automatically track and respond to signal changes.\n * Effects are used to perform side effects in response to reactive updates.\n *\n * @example\n * // Basic effect usage\n * const count = new Signal(0);\n * const dispose = effect(() => {\n *   console.log(`Count changed to: ${count.value}`);\n * });\n * count.value = 1; // Logs: \"Count changed to: 1\"\n * dispose(); // Cleanup effect\n *\n * @example\n * // Effect with cleanup\n * const visible = new Signal(true);\n * const dispose = effect(() => {\n *   if (visible.value) {\n *     const element = document.createElement('div');\n *     document.body.appendChild(element);\n *     // Return cleanup function\n *     return () => {\n *       document.body.removeChild(element);\n *     };\n *   }\n * });\n *\n * @example\n * // Named effect for debugging\n * const timer = new Signal(0);\n * const dispose = effect(() => {\n *   console.log(`Timer: ${timer.value}`);\n * }, 'timerLogger');\n *\n * @example\n * // Effect with multiple dependencies\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n * const dispose = effect(() => {\n *   console.log(`Name changed to: ${firstName.value} ${lastName.value}`);\n * });\n *\n * @example\n * // Effect with error handling\n * const data = new Signal<string | Error>(null);\n * const dispose = effect(() => {\n *   try {\n *     if (data.value instanceof Error) {\n *       console.error('Error:', data.value);\n *     } else {\n *       console.log('Data:', data.value);\n *     }\n *   } catch (error) {\n *     console.error('Effect error:', error);\n *   }\n * });\n */\nexport class EffectImpl implements IEffect {\n    /**\n     * The computation that tracks dependencies and handles recomputation\n     */\n    private readonly computation: Computation;\n\n    /**\n     * Cleanup function from the previous effect execution\n     */\n    cleanup: Cleanup | undefined;\n\n    /**\n     * Flag indicating whether the effect has been disposed\n     */\n    disposed = false;\n\n    /**\n     * Creates a new effect instance\n     *\n     * @param fn - The effect function that may return a cleanup function\n     * @param name - Optional name for debugging purposes\n     */\n    constructor(fn: EffectFunction, name?: string) {\n        this.computation = new class EffectIm extends Computation {\n            // @ts-ignore\n            constructor(private effect: EffectImpl, private fn: EffectFunction) {\n                super(name);\n            }\n\n            /**\n             * Recomputes the effect when dependencies change\n             * Handles proper context management and error boundaries\n             */\n            recompute(): void {\n                if (this.disposed) return;\n\n                const context = Context.getInstance();\n                context.pushComputation(this);\n\n                try {\n                    context.pushComputation(this);\n                    context.registerEffect(this.effect);\n                    this.effect.runEffect();\n                } finally {\n                    context.unregisterEffect(this.effect);\n                    context.popComputation();\n                    this.dirty = false;\n                }\n            }\n        }(this, fn);\n\n        // Initial computation\n        this.computation.recompute();\n    }\n\n    /**\n     * Disposes of the effect, running cleanup and preventing further executions\n     */\n    dispose(): void {\n        if (this.disposed) return;\n\n        this.disposed = true;\n        if (this.cleanup) {\n            try {\n                this.cleanup();\n            } catch (error) {\n                console.error('Error in effect cleanup:', error);\n            }\n        }\n        this.computation.dispose();\n    }\n\n    /**\n     * Executes the effect function and manages cleanup\n     * Handles error boundaries for both effect and cleanup execution\n     */\n    runEffect(): void {\n        if (this.disposed) return;\n\n        // Run cleanup from previous execution\n        if (this.cleanup) {\n            try {\n                this.cleanup();\n            } catch (error) {\n                console.error('Error in effect cleanup:', error);\n            }\n        }\n\n        try {\n            // @ts-ignore - We know this exists from the constructor\n            this.cleanup = this.computation['fn']();\n        } catch (error) {\n            console.error('Error in effect:', error);\n            throw error;\n        }\n    }\n}\n\n/**\n * Creates a new effect that automatically tracks and responds to signal changes\n *\n * @param fn - Effect function that may return a cleanup function\n * @param name - Optional name for debugging purposes\n * @returns A disposable object to cleanup the effect\n *\n * @example\n * // DOM manipulation effect\n * const isVisible = new Signal(true);\n * const dispose = effect(() => {\n *   const element = document.querySelector('.target');\n *   element.style.display = isVisible.value ? 'block' : 'none';\n * });\n *\n * @example\n * // Effect with async operations\n * const userId = new Signal<number | null>(null);\n * const dispose = effect(() => {\n *   const id = userId.value;\n *   if (id !== null) {\n *     let cancelled = false;\n *     fetchUserData(id).then(data => {\n *       if (!cancelled) {\n *         // Handle data\n *       }\n *     });\n *     return () => {\n *       cancelled = true;\n *     };\n *   }\n * });\n */\nexport function effect(fn: EffectFunction, name?: string): Disposable {\n    return new EffectImpl(fn, name);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { effect, Signal } from '../core';\n\n/**\n * Debug utility to track signal updates\n */\nexport function debug<T>(signal: Signal<T>, name: string): Signal<T> {\n    effect(() => {\n        console.log(`[Signal Debug] ${name}:`, signal.value);\n    }, `debug-${name}`);\n    return signal;\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { SignalMetrics } from '../core';\n\n/**\n * Monitor signal performance metrics\n */\nexport class SignalMonitor {\n    private static metrics: SignalMetrics = {\n        updates: 0,\n        computations: 0,\n        maxChainDepth: 0,\n        averageUpdateTime: 0,\n    };\n\n    private static updateTimes: number[] = [];\n\n    static trackUpdate(duration: number): void {\n        this.metrics.updates++;\n        this.updateTimes.push(duration);\n\n        if (this.updateTimes.length > 100) {\n            this.updateTimes.shift();\n        }\n\n        this.metrics.averageUpdateTime =\n            this.updateTimes.reduce((a, b) => a + b, 0) / this.updateTimes.length;\n    }\n\n    static trackComputation(depth: number): void {\n        this.metrics.computations++;\n        this.metrics.maxChainDepth = Math.max(this.metrics.maxChainDepth, depth);\n    }\n\n    static getMetrics(): SignalMetrics {\n        return { ...this.metrics };\n    }\n\n    static reset(): void {\n        this.metrics = {\n            updates: 0,\n            computations: 0,\n            maxChainDepth: 0,\n            averageUpdateTime: 0,\n        };\n        this.updateTimes = [];\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\n/**\n * Disposed signal operations\n */\nexport class SignalDisposedError extends Error {\n    constructor(operation: string) {\n        super(`Cannot ${operation} a disposed signal`);\n        this.name = 'SignalDisposedError';\n    }\n}\n\n/**\n * Circular dependency detection\n */\nexport class CircularDependencyError extends Error {\n    constructor(signalName?: string) {\n        super(`Circular dependency detected${signalName ? ` in signal \"${signalName}\"` : ''}`);\n        this.name = 'CircularDependencyError';\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { IComputation, SignalOptions, WritableSignal } from './interfaces';\nimport { SignalDisposedError } from './errors';\nimport { EqualityFunction, TransformFunction } from './types';\nimport { Context } from './context';\n\n/**\n * Signal class implements a reactive primitive that holds a value and notifies dependents of changes.\n * It follows the WritableSignal interface contract for value updates and subscriptions.\n *\n * @template T The type of value held by the signal\n\n *\n * @example\n * // Basic usage with primitive values\n * const counter = new Signal(0);\n * console.log(counter.value); // 0\n * counter.value = 1;\n * console.log(counter.value); // 1\n *\n * @example\n * // Using update function\n * const counter = new Signal(0);\n * counter.update(current => current + 1); // Increments by 1\n *\n * @example\n * // Subscribing to changes\n * const name = new Signal('John');\n * const unsubscribe = name.subscribe(newValue => {\n *   console.log(`Name changed to: ${newValue}`);\n * });\n * name.value = 'Jane'; // Logs: \"Name changed to: Jane\"\n * unsubscribe(); // Removes the subscription\n *\n * @example\n * // Using custom equality function for objects\n * const user = new Signal(\n *   { id: 1, name: 'John' },\n *   {\n *     equals: (prev, next) => prev.id === next.id && prev.name === next.name\n *   }\n * );\n *\n * @example\n * // Proper cleanup\n * const signal = new Signal('test');\n * // ... use signal\n * signal.dispose(); // Clean up when done\n *\n * @example\n * // Using with arrays\n * const list = new Signal<number[]>([]);\n * list.update(current => [...current, 1]); // Adds element\n * list.update(current => current.filter(x => x > 0)); // Filters elements\n *\n * @example\n * // Error handling\n * try {\n *   const signal = new Signal('test');\n *   signal.dispose();\n *   signal.value; // Throws SignalDisposedError\n * } catch (error) {\n *   if (error instanceof SignalDisposedError) {\n *     console.log('Signal was disposed');\n *   }\n * }\n *\n * @example\n * // Using with complex objects and custom name\n * interface Todo {\n *   id: number;\n *   text: string;\n *   completed: boolean;\n * }\n *\n * const todos = new Signal<Todo[]>(\n *   [],\n *   {\n *     name: 'todosList',\n *     equals: (prev, next) =>\n *       prev.length === next.length &&\n *       prev.every((todo, index) =>\n *         todo.id === next[index].id &&\n *         todo.text === next[index].text &&\n *         todo.completed === next[index].completed\n *       )\n *   }\n * );\n *\n * @example\n * // Batching updates using SignalContext\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n *\n */\nexport class Base<T> implements WritableSignal<T> {\n    /**\n     * Function to compare previous and next values for equality.\n     * Used to determine if dependents should be notified of changes.\n     */\n    equals: EqualityFunction<T>;\n    /**\n     * Optional name for debugging and identification purposes\n     */\n    name?: string;\n    /**\n     * Set of computations that depend on this signal's value\n     */\n    protected dependents = new Set<IComputation>();\n\n    /**\n     * Flag indicating whether this signal has been disposed\n     */\n    protected disposed = false;\n\n    /**\n     * Creates a new Signal instance\n     *\n     * @param initialValue - The initial value of the signal\n     * @param options - Configuration options for the signal\n     */\n    constructor(initialValue?: T, options: SignalOptions<T> = {}) {\n        this._value = initialValue as T;\n        // Use provided equals function or default to Object.is\n        this.equals = options.equals ?? Object.is;\n        this.name = options.name || 'anonymous';\n    }\n\n    isCommutable(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * The current value stored in the signal\n     */\n    protected _value: T;\n\n    /**\n     * Gets the current value of the signal.\n     * Tracks dependencies and throws if the signal is disposed.\n     */\n    get value(): T {\n        if (this.disposed) {\n            throw new SignalDisposedError('read from');\n        }\n\n        this.trackDependency();\n        return this._value;\n    }\n\n    /**\n     * Sets a new value for the signal.\n     * Only updates and notifies dependents if the new value is different from the current value.\n     *\n     * @param newValue - The new value to set\n     */\n    set value(newValue: T) {\n        if (this.disposed) {\n            throw new SignalDisposedError('write to');\n        }\n        if (!this.equals(this._value, newValue)) {\n            this._value = newValue;\n            this.notifyDependents();\n        }\n    }\n\n    /**\n     * Gets the current value of the signal without tracking dependencies.\n     */\n    get_value_bypass_tracking(): T {\n        if (this.disposed) {\n            throw new SignalDisposedError('read from');\n        }\n        return this._value;\n    }\n\n    /**\n     * Updates the signal's value using a transformation function\n     *\n     * @param fn - Function that takes the current value and returns a new value\n     */\n    update(fn: TransformFunction<T>): void {\n        this.value = fn(this._value);\n    }\n\n\n    /**\n     * Adds a computation as dependent on this signal\n     *\n     * @param computation - The computation to add as a dependent\n     */\n    addDependent(computation: IComputation): void {\n        this.dependents.add(computation);\n    }\n\n    /**\n     * Removes a computation from this signal's dependents\n     *\n     * @param computation - The computation to remove\n     */\n    removeDependent(computation: IComputation): void {\n        this.dependents.delete(computation);\n    }\n\n    /**\n     * Notifies all dependent computations of a value change\n     * Handles batching through SignalContext if active\n     */\n    notifyDependents(): void {\n        const context = Context.getInstance();\n\n        if (context.isBatching()) {\n            context.addToBatchQueue(this);\n            return;\n        }\n\n        for (const dependent of this.dependents) {\n            dependent.markDirty();\n        }\n    }\n\n    /**\n     * Disposes of the signal and its dependent computations\n     * Prevents memory leaks by cleaning up all references\n     */\n    dispose(): void {\n        if (this.disposed) return;\n\n        this.disposed = true;\n\n        // Create a copy of dependents before iterating to avoid modification during iteration\n        const dependentsToDispose = new Set(this.dependents);\n\n        // First, clear own dependents\n        this.dependents.clear();\n\n        // Then dispose all dependent computations\n        for (const dependent of dependentsToDispose) {\n            // @ts-ignore TODO use concrete type\n            if (dependent.constructor.name == 'ComputedSignal'  || dependent['signal']?.constructor.name == 'ComputedSignal') {\n                // If the dependent is or belongs to a ComputedSignal, dispose it\n                // @ts-ignore\n                const signal = dependent.constructor.name == 'ComputedSignal' ? dependent : dependent['signal'];\n                signal.dispose();\n            } else {\n                // For other types of computations, just dispose the computation\n                dependent.dispose();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the signal has been disposed\n     */\n    isDisposed(): boolean {\n        return this.disposed;\n    }\n\n    /**\n     * Returns the name of the signal for debugging purposes\n     */\n    getDependents(): Set<IComputation> {\n        return this.dependents || new Set();\n    }\n\n    /**\n     * Returns the name of the signal for debugging purposes\n     */\n    hasDependents(): boolean {\n        return this.dependents.size > 0;\n    }\n\n    toString(): string {\n        return `Signal(${this.name})`;\n    }\n\n    /**\n     * Tracks the current computation as dependent on this signal\n     */\n    protected trackDependency(): void {\n        const computation = Context.getInstance().getCurrentComputation();\n        if (computation) {\n            computation.addDependency(this);\n            this.addDependent(computation);\n        }\n    }\n}\n\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Context } from './context';\nimport { Computation } from './computation';\n\nexport class SubscriptionComputation extends Computation {\n    constructor(\n        private callback: () => void\n    ) {\n        super('subscription');\n    }\n\n    recompute(): void {\n        if (this.disposed) return;\n        const context = Context.getInstance();\n        const prevComputation = context.getCurrentComputation();\n        context.setCurrentComputation(this);\n\n        try {\n            this.callback();\n        } finally {\n            if (prevComputation) {\n                context.setCurrentComputation(prevComputation);\n            }\n            this.dirty = false;\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\n/**\n * Core imports for the Signal implementation\n */\nimport { SignalOptions } from './interfaces';\nimport { UnsubscribeFunction } from './types';\nimport { Base } from './base';\nimport { SignalDisposedError } from './errors';\nimport { SubscriptionComputation } from './SubscriptionComputation';\n\n/**\n * Signal class implements a reactive primitive that holds a value and notifies dependents of changes.\n * It follows the WritableSignal interface contract for value updates and subscriptions.\n *\n * @template T The type of value held by the signal\n\n *\n * @example\n * // Basic usage with primitive values\n * const counter = new Signal(0);\n * console.log(counter.value); // 0\n * counter.value = 1;\n * console.log(counter.value); // 1\n *\n * @example\n * // Using update function\n * const counter = new Signal(0);\n * counter.update(current => current + 1); // Increments by 1\n *\n * @example\n * // Subscribing to changes\n * const name = new Signal('John');\n * const unsubscribe = name.subscribe(newValue => {\n *   console.log(`Name changed to: ${newValue}`);\n * });\n * name.value = 'Jane'; // Logs: \"Name changed to: Jane\"\n * unsubscribe(); // Removes the subscription\n *\n * @example\n * // Using custom equality function for objects\n * const user = new Signal(\n *   { id: 1, name: 'John' },\n *   {\n *     equals: (prev, next) => prev.id === next.id && prev.name === next.name\n *   }\n * );\n *\n * @example\n * // Proper cleanup\n * const signal = new Signal('test');\n * // ... use signal\n * signal.dispose(); // Clean up when done\n *\n * @example\n * // Using with arrays\n * const list = new Signal<number[]>([]);\n * list.update(current => [...current, 1]); // Adds element\n * list.update(current => current.filter(x => x > 0)); // Filters elements\n *\n * @example\n * // Error handling\n * try {\n *   const signal = new Signal('test');\n *   signal.dispose();\n *   signal.value; // Throws SignalDisposedError\n * } catch (error) {\n *   if (error instanceof SignalDisposedError) {\n *     console.log('Signal was disposed');\n *   }\n * }\n *\n * @example\n * // Using with complex objects and custom name\n * interface Todo {\n *   id: number;\n *   text: string;\n *   completed: boolean;\n * }\n *\n * const todos = new Signal<Todo[]>(\n *   [],\n *   {\n *     name: 'todosList',\n *     equals: (prev, next) =>\n *       prev.length === next.length &&\n *       prev.every((todo, index) =>\n *         todo.id === next[index].id &&\n *         todo.text === next[index].text &&\n *         todo.completed === next[index].completed\n *       )\n *   }\n * );\n *\n * @example\n * // Batching updates using SignalContext\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n *\n */\nexport class Signal<T> extends Base<T> {\n\n    constructor(initialValue?: T, options: SignalOptions<T> = {}) {\n        super(initialValue, options);\n    }\n\n    /**\n     * Creates a subscription to the signal's value changes\n     *\n     * @param callback - Function to call when the value changes\n     * @returns Function to unsubscribe from changes\n     */\n    subscribe(callback: (value: T) => void): UnsubscribeFunction {\n        if (this.disposed) {\n            throw new SignalDisposedError('subscribe to');\n        }\n        const computed = new SubscriptionComputation(() => {\n            return callback(this.value);\n        });\n\n        computed.recompute();\n\n        return () => computed.dispose();\n    }\n }\n\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\nimport { Computation } from './computation';\nimport { Context } from './context';\nimport { Signal } from './signal';\nimport type { SignalOptions, WritableSignal } from './interfaces';\nimport { CircularDependencyError, SignalDisposedError } from './errors';\n\n/**\n * Signal that derives its value from other signals\n *\n * @example\n * // Create base signals\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n *\n * // Create a computed signal that depends on firstName and lastName\n * const fullName = new ComputedSignal(() => {\n *   return `${firstName.value} ${lastName.value}`;\n * });\n *\n * console.log(fullName.value); // Output: \"John Doe\"\n *\n * // When a dependency changes, the computed value updates automatically\n * firstName.value = 'Jane';\n * console.log(fullName.value); // Output: \"Jane Doe\"\n */\nexport class ComputedSignal<T> extends Signal<T> {\n\n    /** Internal computation instance to manage dependencies and recomputation */\n    private readonly computation: Computation;\n\n    /** Function that computes the derived value */\n    private computeFn: () => T;\n\n    /**\n     * Creates a new computed signal\n     * @param compute Function that derives the signal value\n     * @param options Configuration options for the signal\n     */\n    constructor(compute: () => T, options: SignalOptions<T> = {}) {\n        super({} as T, options);\n        this.computeFn = compute;\n\n        // Create an anonymous computation class instance\n        this.computation = new class ComputationA extends Computation {\n            constructor(private signal: ComputedSignal<T>) {\n                super();\n            }\n\n            /**\n             * Recomputes the signal value when dependencies change\n             */\n            recompute(): void {\n                if (this.disposed) return;\n\n                const context = Context.getInstance();\n                const prevComputation = context.getCurrentComputation();\n                context.setCurrentComputation(this);\n\n                // Prevent circular dependencies through effects\n                if (context.isInEffect()) {\n                    throw new CircularDependencyError(\n                        `Cannot create computed signal that depends on effects`,\n                    );\n                }\n\n                try {\n                    // Check if any dependencies have been disposed\n                    for (const dep of this.dependencies) {\n                        if (dep.isDisposed()) {\n                            this.signal.dispose();\n                            throw new SignalDisposedError('read from disposed dependency');\n                        }\n                    }\n\n                    // Compute new value and update if changed\n                    const newValue = this.signal.computeFn();\n                    if (!this.signal.equals(this.signal._value, newValue)) {\n                        this.signal._value = newValue;\n                        this.signal.notifyDependents();\n                    }\n                } catch (error) {\n                    // Handle disposal errors\n                    if (error instanceof SignalDisposedError) {\n                        this.signal.dispose();\n                    }\n                    throw error;\n                } finally {\n                    // Restore previous computation context\n                    if (prevComputation) {\n                        context.setCurrentComputation(prevComputation);\n                    }\n                    this.dirty = false;\n                }\n            }\n        }(this);\n        // Initial computation\n        this.computation.recompute();\n\n    }\n\n    /**\n     * Gets the current value of the computed signal\n     */\n    override get value(): T {\n        if (this.disposed) {\n            throw new SignalDisposedError('read from');\n        }\n\n        // Verify dependencies are still valid\n        const dependencies = this.computation['dependencies'] as Set<WritableSignal<any>>;\n        for (const dep of dependencies) {\n            if (dep.isDisposed()) {\n                this.dispose();\n                throw new SignalDisposedError('read from disposed dependency');\n            }\n        }\n\n        // Recompute if dependencies have changed\n        if (this.computation.isDirty()) {\n            this.computation.recompute();\n        }\n\n        // Track this signal as a dependency for other computations\n        this.trackDependency();\n        return this._value;\n    }\n\n    /**\n     * Computed signals cannot be set directly\n     */\n    override set value(_: T) {\n        throw new Error('Cannot set the value of a computed signal');\n    }\n\n    /**\n     * Gets the depth of this signal in the dependency graph\n     */\n    getDepth(): number {\n        return this.computation.getDepth();\n    }\n\n    /**\n     * Cleans up the signal and its dependencies\n     */\n    override dispose(): void {\n        if (this.disposed) return;\n\n        super.dispose();\n        this.computation.dispose();\n\n        // Recursively dispose dependent computed signals\n        for (const dependent of this.dependents) {\n            // @ts-ignore\n            if (dependent instanceof ComputedSignal || dependent['signal'] instanceof ComputedSignal) {\n                // @ts-ignore\n                const signal = dependent instanceof ComputedSignal ? dependent : dependent['signal'];\n                signal.dispose();\n            }\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { ComputedSignal, Signal, Context, UpdateQueue } from '../core';\nimport { SignalMonitor } from './signalMonitor';\n\n/**\n * Reset the entire signal system state\n * Useful for testing and debugging\n */\nexport function resetSignalSystem(): void {\n    // @ts-ignore\n    Context['instance'] = undefined;\n    // @ts-ignore\n    UpdateQueue['instance'] = undefined;\n    SignalMonitor.reset();\n}\n\n\n/**\n * Custom JSON serializer for signals\n * Useful for debugging and persistence\n */\nexport const serializeSignal = <T>(signal: Signal<T>): string => {\n    return JSON.stringify({\n        value: signal.value,\n        // @ts-ignore - accessing protected property for serialization\n        name: signal['name'],\n        // @ts-ignore - accessing protected property for serialization\n        disposed: signal['disposed'],\n    });\n};\n\n/**\n * Type guard to check if a value is a Signal\n */\nexport function isSignal<T>(value: any): value is Signal<T> {\n    return value instanceof Signal;\n}\n\n/**\n * Get the current computation depth of a signal chain\n */\nexport function getSignalDepth(signal: Signal<any>): number {\n    if (signal instanceof ComputedSignal) {\n        return signal.getDepth();\n    }\n    return 0;\n}\n\n/**\n * Check if a signal is part of a circular dependency chain\n */\nexport function hasCircularDependency(signal: Signal<any>): boolean {\n    const visited = new Set<Signal<any>>();\n    const recursionStack = new Set<Signal<any>>();\n\n    function dfs(current: Signal<any>): boolean {\n        if (recursionStack.has(current)) {\n            return true;\n        }\n        if (visited.has(current)) {\n            return false;\n        }\n\n        visited.add(current);\n        recursionStack.add(current);\n\n        // @ts-ignore - accessing protected property for cycle detection\n        const dependents = current['dependents'] || new Set();\n        for (const dependent of dependents) {\n            // @ts-ignore - accessing protected property for cycle detection\n            if (dependent['computation']?.signal && dfs(dependent['computation'].signal)) {\n                return true;\n            }\n        }\n\n        recursionStack.delete(current);\n        return false;\n    }\n\n    return dfs(signal);\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","UpdateQueue","queue","Set","processing","updateDepth","maxUpdateDepth","getInstance","this","instance","schedule","computation","Error","add","processQueue","size","computations","Array","from","clear","sort","a","b","getDepth","isDirty","isDisposed","recompute","Computation","constructor","name","dirty","disposed","dependencies","dependents","depth","addDependency","signal","has","removeDependency","delete","dispose","clearDependencies","markDirty","hasSignal","dep","removeDependent","oldDepth","maxDepth","Math","max","dependent","Context","computationStack","batchDepth","batchQueue","activeEffects","getCurrentComputation","length","pushComputation","includes","push","popComputation","pop","isBatching","beginBatch","endBatch","flushBatchQueue","addToBatchQueue","uniqueSignals","getDependents","setCurrentComputation","registerEffect","effect","unregisterEffect","isInEffect","EffectImpl","fn","super","context","runEffect","cleanup","error","debug","SignalMonitor","trackUpdate","duration","metrics","updates","updateTimes","shift","averageUpdateTime","reduce","trackComputation","maxChainDepth","getMetrics","reset","SignalDisposedError","operation","CircularDependencyError","signalName","Base","initialValue","options","_value","equals","is","isCommutable","trackDependency","newValue","notifyDependents","get_value_bypass_tracking","update","addDependent","dependentsToDispose","hasDependents","toString","SubscriptionComputation","callback","prevComputation","Signal","subscribe","computed","ComputedSignal","compute","computeFn","_","resetSignalSystem","undefined","serializeSignal","JSON","stringify","isSignal","getSignalDepth","hasCircularDependency","visited","recursionStack","dfs","current"],"sourceRoot":""}