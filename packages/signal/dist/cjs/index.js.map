{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@avatijs/signal/webpack/bootstrap","webpack://@avatijs/signal/webpack/runtime/define property getters","webpack://@avatijs/signal/webpack/runtime/hasOwnProperty shorthand","webpack://@avatijs/signal/webpack/runtime/make namespace object","webpack://@avatijs/signal/./src/core/errors.ts","webpack://@avatijs/signal/./src/core/context.ts","webpack://@avatijs/signal/./src/core/base.ts","webpack://@avatijs/signal/./src/core/updateQueue.ts","webpack://@avatijs/signal/./src/core/computation.ts","webpack://@avatijs/signal/./src/core/SubscriptionComputation.ts","webpack://@avatijs/signal/./src/core/signal.ts","webpack://@avatijs/signal/./src/async/asyncSignal.ts","webpack://@avatijs/signal/./src/core/computedSignal.ts","webpack://@avatijs/signal/./src/core/computed.ts","webpack://@avatijs/signal/./src/computed/combine.ts","webpack://@avatijs/signal/./src/core/effect.ts","webpack://@avatijs/signal/./src/core/createSignal.ts","webpack://@avatijs/signal/./src/core/batch.ts","webpack://@avatijs/signal/./src/core/utility.ts","webpack://@avatijs/signal/./src/debug/debug.ts","webpack://@avatijs/signal/./src/debug/signalMonitor.ts","webpack://@avatijs/signal/./src/debug/utility.ts","webpack://@avatijs/signal/./src/extensions/debounced.ts","webpack://@avatijs/signal/./src/extensions/filtered.ts","webpack://@avatijs/signal/./src/extensions/map.ts","webpack://@avatijs/signal/./src/extensions/peek.ts","webpack://@avatijs/signal/./src/extensions/queue.ts","webpack://@avatijs/signal/./src/extensions/throttled.ts","webpack://@avatijs/signal/./src/extensions/threshold.ts","webpack://@avatijs/signal/./src/extensions/validated.ts","webpack://@avatijs/signal/./src/persistence/persisted.ts","webpack://@avatijs/signal/./src/persistence/withHistory.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\n/**\n * Disposed signal operations\n */\nexport class SignalDisposedError extends Error {\n    constructor(operation: string) {\n        super(`Cannot ${operation} a disposed signal`);\n        this.name = 'SignalDisposedError';\n    }\n}\n\n/**\n * Circular dependency detection\n */\nexport class CircularDependencyError extends Error {\n    constructor(signalName?: string) {\n        super(`Circular dependency detected${signalName ? ` in signal \"${signalName}\"` : ''}`);\n        this.name = 'CircularDependencyError';\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Disposable, IComputation, IEffect, WritableSignal } from './interfaces';\n\n/**\n * Manages the global state and context of signal computations\n */\nexport class Context {\n    private static instance: Context;\n    private computationStack: IComputation[] = [];\n    private batchDepth = 0;\n    private batchQueue = new Set<WritableSignal<any>>();\n    private activeEffects = new Set<Disposable>();\n\n    static getInstance(): Context {\n        if (!this.instance) {\n            this.instance = new Context();\n        }\n        return this.instance;\n    }\n\n    getCurrentComputation(): IComputation | undefined {\n        return this.computationStack[this.computationStack.length - 1];\n    }\n\n    pushComputation(computation: IComputation): void {\n        // Check for circular dependencies\n        if (computation && this.computationStack.includes(computation)) {\n            // throw new CircularDependencyError();\n            return;\n        }\n        // we can push undefined to the stack\n        this.computationStack.push(computation);\n    }\n\n    popComputation(): void {\n        this.computationStack.pop();\n    }\n\n    isBatching(): boolean {\n        return this.batchDepth > 0;\n    }\n\n    beginBatch(): void {\n        this.batchDepth++;\n    }\n\n    endBatch(): void {\n        this.batchDepth--;\n        if (this.batchDepth === 0) {\n            this.flushBatchQueue();\n        }\n    }\n\n    addToBatchQueue(signal: WritableSignal<any>): void {\n        this.batchQueue.add(signal);\n    }\n\n    flushBatchQueue(): void {\n        // Create a new Set for unique signals\n        const uniqueSignals = new Set(this.batchQueue);\n        this.batchQueue.clear();\n\n        // Get all dependent computations\n        const computations = new Set<IComputation>();\n\n        for (const signal of uniqueSignals) {\n            for (const dependent of signal.getDependents()) {\n                computations.add(dependent);\n            }\n        }\n        // Mark all computations as dirty\n        for (const computation of computations) {\n            computation.markDirty();\n        }\n    }\n\n    setCurrentComputation(computation: IComputation): void {\n        this.computationStack[this.computationStack.length - 1] = computation;\n    }\n\n\n    registerEffect(effect: IEffect): void {\n        this.activeEffects.add(effect);\n    }\n\n    unregisterEffect(effect: IEffect): void {\n        this.activeEffects.delete(effect);\n    }\n\n    // Add this method to check if we're currently in an effect\n    isInEffect(): boolean {\n        return this.activeEffects.size > 0;\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { IComputation, SignalOptions, WritableSignal } from './interfaces';\nimport { SignalDisposedError } from './errors';\nimport { EqualityFunction, TransformFunction } from './types';\nimport { Context } from './context';\n\n/**\n * Signal class implements a reactive primitive that holds a value and notifies dependents of changes.\n * It follows the WritableSignal interface contract for value updates and subscriptions.\n *\n * @template T The type of value held by the signal\n\n *\n * @example\n * // Basic usage with primitive values\n * const counter = new Signal(0);\n * console.log(counter.value); // 0\n * counter.value = 1;\n * console.log(counter.value); // 1\n *\n * @example\n * // Using update function\n * const counter = new Signal(0);\n * counter.update(current => current + 1); // Increments by 1\n *\n * @example\n * // Subscribing to changes\n * const name = new Signal('John');\n * const unsubscribe = name.subscribe(newValue => {\n *   console.log(`Name changed to: ${newValue}`);\n * });\n * name.value = 'Jane'; // Logs: \"Name changed to: Jane\"\n * unsubscribe(); // Removes the subscription\n *\n * @example\n * // Using custom equality function for objects\n * const user = new Signal(\n *   { id: 1, name: 'John' },\n *   {\n *     equals: (prev, next) => prev.id === next.id && prev.name === next.name\n *   }\n * );\n *\n * @example\n * // Proper cleanup\n * const signal = new Signal('test');\n * // ... use signal\n * signal.dispose(); // Clean up when done\n *\n * @example\n * // Using with arrays\n * const list = new Signal<number[]>([]);\n * list.update(current => [...current, 1]); // Adds element\n * list.update(current => current.filter(x => x > 0)); // Filters elements\n *\n * @example\n * // Error handling\n * try {\n *   const signal = new Signal('test');\n *   signal.dispose();\n *   signal.value; // Throws SignalDisposedError\n * } catch (error) {\n *   if (error instanceof SignalDisposedError) {\n *     console.log('Signal was disposed');\n *   }\n * }\n *\n * @example\n * // Using with complex objects and custom name\n * interface Todo {\n *   id: number;\n *   text: string;\n *   completed: boolean;\n * }\n *\n * const todos = new Signal<Todo[]>(\n *   [],\n *   {\n *     name: 'todosList',\n *     equals: (prev, next) =>\n *       prev.length === next.length &&\n *       prev.every((todo, index) =>\n *         todo.id === next[index].id &&\n *         todo.text === next[index].text &&\n *         todo.completed === next[index].completed\n *       )\n *   }\n * );\n *\n * @example\n * // Batching updates using SignalContext\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n *\n */\nexport class Base<T> implements WritableSignal<T> {\n    /**\n     * Function to compare previous and next values for equality.\n     * Used to determine if dependents should be notified of changes.\n     */\n    equals: EqualityFunction<T>;\n    /**\n     * Optional name for debugging and identification purposes\n     */\n    name?: string;\n    /**\n     * Set of computations that depend on this signal's value\n     */\n    protected dependents = new Set<IComputation>();\n\n    /**\n     * Flag indicating whether this signal has been disposed\n     */\n    protected disposed = false;\n\n    /**\n     * Creates a new Signal instance\n     *\n     * @param initialValue - The initial value of the signal\n     * @param options - Configuration options for the signal\n     */\n    constructor(initialValue?: T, options: SignalOptions<T> = {}) {\n        this._value = initialValue as T;\n        // Use provided equals function or default to Object.is\n        this.equals = options.equals ?? Object.is;\n        this.name = options.name || 'anonymous';\n    }\n\n    isCommutable(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    /**\n     * The current value stored in the signal\n     */\n    protected _value: T;\n\n    /**\n     * Gets the current value of the signal.\n     * Tracks dependencies and throws if the signal is disposed.\n     */\n    get value(): T {\n        if (this.disposed) {\n            throw new SignalDisposedError('read from');\n        }\n\n        this.trackDependency();\n        return this._value;\n    }\n\n    /**\n     * Sets a new value for the signal.\n     * Only updates and notifies dependents if the new value is different from the current value.\n     *\n     * @param newValue - The new value to set\n     */\n    set value(newValue: T) {\n        if (this.disposed) {\n            throw new SignalDisposedError('write to');\n        }\n        if (!this.equals(this._value, newValue)) {\n            this._value = newValue;\n            this.notifyDependents();\n        }\n    }\n\n    /**\n     * Gets the current value of the signal without tracking dependencies.\n     */\n    get_value_bypass_tracking(): T {\n        if (this.disposed) {\n            throw new SignalDisposedError('read from');\n        }\n        return this._value;\n    }\n\n    /**\n     * Updates the signal's value using a transformation function\n     *\n     * @param fn - Function that takes the current value and returns a new value\n     */\n    update(fn: TransformFunction<T>): void {\n        this.value = fn(this._value);\n    }\n\n\n    /**\n     * Adds a computation as dependent on this signal\n     *\n     * @param computation - The computation to add as a dependent\n     */\n    addDependent(computation: IComputation): void {\n        this.dependents.add(computation);\n    }\n\n    /**\n     * Removes a computation from this signal's dependents\n     *\n     * @param computation - The computation to remove\n     */\n    removeDependent(computation: IComputation): void {\n        this.dependents.delete(computation);\n    }\n\n    /**\n     * Notifies all dependent computations of a value change\n     * Handles batching through SignalContext if active\n     */\n    notifyDependents(): void {\n        const context = Context.getInstance();\n\n        if (context.isBatching()) {\n            context.addToBatchQueue(this);\n            return;\n        }\n\n        for (const dependent of this.dependents) {\n            dependent.markDirty();\n        }\n    }\n\n    /**\n     * Disposes of the signal and its dependent computations\n     * Prevents memory leaks by cleaning up all references\n     */\n    dispose(): void {\n        if (this.disposed) return;\n\n        this.disposed = true;\n\n        // Create a copy of dependents before iterating to avoid modification during iteration\n        const dependentsToDispose = new Set(this.dependents);\n\n        // First, clear own dependents\n        this.dependents.clear();\n\n        // Then dispose all dependent computations\n        for (const dependent of dependentsToDispose) {\n            // @ts-ignore TODO use concrete type\n            if (dependent.constructor.name == 'ComputedSignal'  || dependent['signal']?.constructor.name == 'ComputedSignal') {\n                // If the dependent is or belongs to a ComputedSignal, dispose it\n                // @ts-ignore\n                const signal = dependent.constructor.name == 'ComputedSignal' ? dependent : dependent['signal'];\n                signal.dispose();\n            } else {\n                // For other types of computations, just dispose the computation\n                dependent.dispose();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the signal has been disposed\n     */\n    isDisposed(): boolean {\n        return this.disposed;\n    }\n\n    /**\n     * Returns the name of the signal for debugging purposes\n     */\n    getDependents(): Set<IComputation> {\n        return this.dependents || new Set();\n    }\n\n    /**\n     * Returns the name of the signal for debugging purposes\n     */\n    hasDependents(): boolean {\n        return this.dependents.size > 0;\n    }\n\n    toString(): string {\n        return `Signal(${this.name})`;\n    }\n\n    /**\n     * Tracks the current computation as dependent on this signal\n     */\n    protected trackDependency(): void {\n        const computation = Context.getInstance().getCurrentComputation();\n        if (computation) {\n            computation.addDependency(this);\n            this.addDependent(computation);\n        }\n    }\n}\n\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { IComputation } from './interfaces';\n\n/**\n * Manages the scheduling and processing of signal updates\n * Uses a topological sort to handle updates in the correct order\n */\nexport class UpdateQueue {\n    private static instance: UpdateQueue;\n    private queue = new Set<IComputation>();\n    private processing = false;\n    private updateDepth = 0;\n    private maxUpdateDepth = 1000; // Configurable maximum update depth\n\n    static getInstance(): UpdateQueue {\n        if (!this.instance) {\n            this.instance = new UpdateQueue();\n        }\n        return this.instance;\n    }\n\n    /**\n     * Schedule a computation for update\n     */\n    schedule(computation: IComputation): void {\n        if (this.updateDepth >= this.maxUpdateDepth) {\n            throw new Error('Maximum update depth exceeded - possible circular dependency');\n        }\n\n        this.queue.add(computation);\n        if (!this.processing) {\n            this.processQueue();\n        }\n    }\n\n    /**\n     * Process all scheduled updates in dependency order\n     */\n    private processQueue(): void {\n        this.processing = true;\n        this.updateDepth++;\n\n        try {\n            while (this.queue.size > 0) {\n                const computations = Array.from(this.queue);\n                this.queue.clear();\n\n                // Sort by dependency depth to ensure correct update order\n                computations.sort((a, b) => a.getDepth() - b.getDepth());\n\n                for (const computation of computations) {\n                    if (computation.isDirty() && !computation.isDisposed()) {\n                        computation.recompute();\n                    }\n                }\n            }\n        } finally {\n            this.processing = false;\n            this.updateDepth--;\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Disposable, IComputation, type WritableSignal } from './interfaces';\nimport { UpdateQueue } from './updateQueue';\n\n/**\n * Base class for managing reactive computations\n */\nexport abstract class Computation implements Disposable, IComputation {\n    protected dirty = true;\n    protected disposed = false;\n    protected dependencies = new Set<WritableSignal<any>>();\n    protected dependents = new Set<Computation>();\n    protected depth = 0;\n    protected name?: string;\n\n    abstract recompute(): void;\n\n    constructor(name?: string) {\n        this.name = name;\n    }\n\n\n    /**\n     * Add a dependency to this computation\n     */\n    addDependency(signal: WritableSignal<any>): void {\n        if (!this.dependencies.has(signal)) {\n            this.dependencies.add(signal);\n            if (signal.constructor.name == 'ComputedSignal') {\n                this.updateDepth();\n            }\n        }\n    }\n\n    /**\n     * Remove a dependency from this computation\n     */\n    removeDependency(signal: WritableSignal<any>): void {\n        if (this.dependencies.delete(signal)) {\n            this.updateDepth();\n        }\n    }\n\n    /**\n     * Clean up computation resources\n     */\n    dispose(): void {\n        if (this.disposed) return;\n\n        this.disposed = true;\n        this.clearDependencies();\n        this.dependents.clear();\n    }\n\n    /**\n     * Check if computation is dirty\n     */\n    isDirty(): boolean {\n        return this.dirty;\n    }\n\n    /**\n     * Check if computation has been disposed\n     */\n    isDisposed(): boolean {\n        return this.disposed;\n    }\n\n    /**\n     * Add a dependent computation, which will be recomputed when this computation updates\n     */\n    getDepth(): number {\n        return this.depth;\n    }\n\n    /**\n     * Mark computation as dirty and schedule update\n     */\n    markDirty(): void {\n\n        if (!this.disposed) {\n            this.dirty = true;\n            UpdateQueue.getInstance().schedule(this);\n        }\n    }\n\n    /**\n     * Check if signal is a dependency of this computation\n     * @param signal\n     */\n    hasSignal(signal: WritableSignal<any>): boolean {\n        return this.dependencies.has(signal);\n    }\n\n    /**\n     * Clear all dependencies and update depth\n     */\n    clearDependencies(): void {\n        for (const dep of this.dependencies) {\n            dep.removeDependent(this);\n        }\n        this.dependencies.clear();\n        this.updateDepth();\n    }\n\n    /**\n     * Update the computation's depth in the dependency graph\n     */\n    updateDepth(): void {\n        const oldDepth = this.depth;\n        let maxDepth = 0;\n\n        for (const dep of this.dependencies) {\n            if (dep.constructor.name == 'ComputedSignal') {\n                // @ts-ignore TODO use concrete type\n                maxDepth = Math.max(maxDepth, dep.getDepth() + 1);\n            }\n        }\n\n        if (oldDepth !== maxDepth) {\n            this.depth = maxDepth;\n            // Propagate depth update to dependents\n            for (const dependent of this.dependents) {\n                dependent.updateDepth();\n            }\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Context } from './context';\nimport { Computation } from './computation';\n\nexport class SubscriptionComputation extends Computation {\n    constructor(\n        private callback: () => void\n    ) {\n        super('subscription');\n    }\n\n    recompute(): void {\n        if (this.disposed) return;\n        const context = Context.getInstance();\n        const prevComputation = context.getCurrentComputation();\n        context.setCurrentComputation(this);\n\n        try {\n            this.callback();\n        } finally {\n            if (prevComputation) {\n                context.setCurrentComputation(prevComputation);\n            }\n            this.dirty = false;\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\n/**\n * Core imports for the Signal implementation\n */\nimport { SignalOptions } from './interfaces';\nimport { UnsubscribeFunction } from './types';\nimport { Base } from './base';\nimport { SignalDisposedError } from './errors';\nimport { SubscriptionComputation } from './SubscriptionComputation';\n\n/**\n * Signal class implements a reactive primitive that holds a value and notifies dependents of changes.\n * It follows the WritableSignal interface contract for value updates and subscriptions.\n *\n * @template T The type of value held by the signal\n\n *\n * @example\n * // Basic usage with primitive values\n * const counter = new Signal(0);\n * console.log(counter.value); // 0\n * counter.value = 1;\n * console.log(counter.value); // 1\n *\n * @example\n * // Using update function\n * const counter = new Signal(0);\n * counter.update(current => current + 1); // Increments by 1\n *\n * @example\n * // Subscribing to changes\n * const name = new Signal('John');\n * const unsubscribe = name.subscribe(newValue => {\n *   console.log(`Name changed to: ${newValue}`);\n * });\n * name.value = 'Jane'; // Logs: \"Name changed to: Jane\"\n * unsubscribe(); // Removes the subscription\n *\n * @example\n * // Using custom equality function for objects\n * const user = new Signal(\n *   { id: 1, name: 'John' },\n *   {\n *     equals: (prev, next) => prev.id === next.id && prev.name === next.name\n *   }\n * );\n *\n * @example\n * // Proper cleanup\n * const signal = new Signal('test');\n * // ... use signal\n * signal.dispose(); // Clean up when done\n *\n * @example\n * // Using with arrays\n * const list = new Signal<number[]>([]);\n * list.update(current => [...current, 1]); // Adds element\n * list.update(current => current.filter(x => x > 0)); // Filters elements\n *\n * @example\n * // Error handling\n * try {\n *   const signal = new Signal('test');\n *   signal.dispose();\n *   signal.value; // Throws SignalDisposedError\n * } catch (error) {\n *   if (error instanceof SignalDisposedError) {\n *     console.log('Signal was disposed');\n *   }\n * }\n *\n * @example\n * // Using with complex objects and custom name\n * interface Todo {\n *   id: number;\n *   text: string;\n *   completed: boolean;\n * }\n *\n * const todos = new Signal<Todo[]>(\n *   [],\n *   {\n *     name: 'todosList',\n *     equals: (prev, next) =>\n *       prev.length === next.length &&\n *       prev.every((todo, index) =>\n *         todo.id === next[index].id &&\n *         todo.text === next[index].text &&\n *         todo.completed === next[index].completed\n *       )\n *   }\n * );\n *\n * @example\n * // Batching updates using SignalContext\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n *\n */\nexport class Signal<T> extends Base<T> {\n\n    constructor(initialValue?: T, options: SignalOptions<T> = {}) {\n        super(initialValue, options);\n    }\n\n    /**\n     * Creates a subscription to the signal's value changes\n     *\n     * @param callback - Function to call when the value changes\n     * @returns Function to unsubscribe from changes\n     */\n    subscribe(callback: (value: T) => void): UnsubscribeFunction {\n        if (this.disposed) {\n            throw new SignalDisposedError('subscribe to');\n        }\n        const computed = new SubscriptionComputation(() => {\n            return callback(this.value);\n        });\n\n        computed.recompute();\n\n        return () => computed.dispose();\n    }\n }\n\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { Signal, SignalOptions } from '../core';\n\n/**\n * Represents the state of an asynchronous operation\n * @template T The type of data being fetched\n * @template E The type of error (defaults to Error)\n */\nexport interface AsyncState<T, E = Error> {\n    /** The fetched data */\n    data: T | null;\n    /** Whether a fetch is in progress */\n    loading: boolean;\n    /** Any error that occurred during fetch */\n    error: E | null;\n    /** When the data was last fetched */\n    timestamp: number;\n}\n\n/**\n * Configuration options for AsyncSignal\n * @template T The type of data being fetched\n * @template E The type of error\n *\n * @example\n * // Basic caching config\n * const options: AsyncSignalOptions<User> = {\n *   cache: {\n *     enabled: true,\n *     ttl: 5 * 60 * 1000 // 5 minutes\n *   }\n * };\n *\n * @example\n * // Retry with exponential backoff\n * const options: AsyncSignalOptions<User> = {\n *   retryConfig: {\n *     attempts: 3,      // Try 3 times\n *     delay: 1000,      // Start with 1s delay\n *     backoffFactor: 2  // Double delay each retry: 1s, 2s, 4s\n *   }\n * };\n *\n * @example\n * // With analytics callbacks\n * const options: AsyncSignalOptions<User> = {\n *   onSuccess: (user) => {\n *     analytics.track('userFetched', { userId: user.id });\n *     updateUI(user);\n *   },\n *   onError: (error) => {\n *     errorReporting.capture(error);\n *     showErrorToast(error.message);\n *   }\n * };\n */\nexport interface AsyncSignalOptions<T, E = Error> extends SignalOptions<AsyncState<T, E>> {\n    cache?: {\n        enabled: boolean;   //\n        ttl?: number;      // How long to cache results (ms)\n    };\n    retryConfig?: {\n        attempts: number;    // Maximum retry attempts\n        delay: number;      // Initial delay between retries (ms)\n        backoffFactor: number; // How much to increase delay each retry\n    };\n    onError?: (error: E) => void;    // Error callback\n    onSuccess?: (data: T) => void;   // Success callback\n}\n\n/**\n * A Signal subclass for managing asynchronous operations with built-in\n * loading states, caching, and retry logic\n *\n * @template T Type of data being fetched\n * @template E Type of error that can occur\n *\n * @example\n * // User authentication with error handling\n * interface User {\n *   id: string;\n *   name: string;\n *   email: string;\n * }\n *\n * interface AuthError {\n *   code: 'invalid_credentials' | 'network_error' | 'server_error';\n *   message: string;\n * }\n *\n * const authSignal = new AsyncSignal<User, AuthError>(\n *   async () => {\n *     const response = await fetch('/api/auth');\n *     if (!response.ok) {\n *       throw {\n *         code: 'invalid_credentials',\n *         message: 'Invalid username or password'\n *       };\n *     }\n *     return response.json();\n *   },\n *   {\n *     cache: { enabled: true, ttl: 30 * 60 * 1000 }, // 30min cache\n *     onError: (error) => {\n *       if (error.code === 'invalid_credentials') {\n *         showLoginForm();\n *       } else {\n *         showErrorDialog(error.message);\n *       }\n *     }\n *   }\n * );\n *\n * @example\n * // Real-time search with request cancellation\n * const searchSignal = new AsyncSignal(\n *   async (query: string) => {\n *     const response = await fetch(`/api/search?q=${query}`);\n *     return response.json();\n *   }\n * );\n *\n * searchInput.addEventListener('input', async (e) => {\n *   const results = await searchSignal.fetch(); // Auto-cancels previous\n *   updateSearchResults(results);\n * });\n *\n * @example\n * // File upload with progress tracking\n * const uploadSignal = new AsyncSignal<string>(\n *   async (file: File) => {\n *     const formData = new FormData();\n *     formData.append('file', file);\n *\n *     const response = await fetch('/api/upload', {\n *       method: 'POST',\n *       body: formData\n *     });\n *\n *     if (!response.ok) {\n *       throw new Error('Upload failed');\n *     }\n *\n *     const { url } = await response.json();\n *     return url;\n *   },\n *   {\n *     retryConfig: {\n *       attempts: 3,\n *       delay: 2000,\n *       backoffFactor: 1.5\n *     },\n *     onSuccess: (url) => {\n *       showSuccess(`File uploaded to ${url}`);\n *     }\n *   }\n * );\n *\n * @example\n * // Polling with caching\n * const pollSignal = new AsyncSignal<JobStatus>(\n *   async (jobId: string) => {\n *     const response = await fetch(`/api/jobs/${jobId}`);\n *     return response.json();\n *   },\n *   {\n *     cache: {\n *       enabled: true,\n *       ttl: 5000 // Cache for 5s between polls\n *     }\n *   }\n * );\n *\n * const pollJob = async (jobId: string) => {\n *   while (true) {\n *     const status = await pollSignal.fetch();\n *     if (status.state === 'completed') break;\n *     await new Promise(resolve => setTimeout(resolve, 5000));\n *   }\n * };\n */\nexport class AsyncSignal<T, E = Error> extends Signal<AsyncState<T, E>> {\n    private readonly fetchFn: () => Promise<T>;\n    private options: AsyncSignalOptions<T, E>;\n    private abortController: AbortController | null = null;\n\n    constructor(\n        fetchFn: () => Promise<T>,\n        options: AsyncSignalOptions<T, E> = {},\n    ) {\n        super({\n            data: null,\n            loading: false,\n            error: null,\n            timestamp: 0,\n        }, options);\n\n        this.fetchFn = fetchFn;\n        this.options = options;\n    }\n\n    /**\n     * Fetches data using the provided fetch function\n     * Handles loading states, caching, retries, and error handling\n     *\n     * @param force Whether to bypass cache and force a new fetch\n     * @returns The fetched data or null if fetch failed\n     *\n     * @example\n     * const signal = new AsyncSignal(fetchUser);\n     * await signal.fetch(); // Normal fetch, uses cache if valid\n     * await signal.fetch(true); // Force fetch, bypass cache\n     */\n    async fetch(force: boolean = false): Promise<T | null> {\n        // Check cache unless forced refresh\n        if (this.isCacheValid() && !force) {\n            return this.value.data;\n        }\n\n        // Cancel any in-flight request\n        if (this.abortController) {\n            this.abortController.abort();\n        }\n        this.abortController = new AbortController();\n\n        // Set loading state\n        this.value = {\n            ...this.value,\n            loading: true,\n            error: null,\n        };\n\n        // Initialize retry loop variables\n        let attempts = 0;\n        const maxAttempts = this.options.retryConfig?.attempts || 1;\n        const delay = this.options.retryConfig?.delay || 1000;\n        const backoffFactor = this.options.retryConfig?.backoffFactor || 2;\n\n        // Retry loop\n        while (attempts < maxAttempts) {\n            try {\n                const data = await this.fetchFn();\n                // Update state on success\n                this.value = {\n                    data,\n                    loading: false,\n                    error: null,\n                    timestamp: Date.now(),\n                };\n                this.options.onSuccess?.(data);\n                return data;\n            } catch (error) {\n                attempts++;\n                // If out of retries, set error state\n                if (attempts === maxAttempts) {\n                    this.value = {\n                        ...this.value,\n                        loading: false,\n                        error: error as E,\n                    };\n                    this.options.onError?.(error as E);\n                    return null;\n                }\n                // Wait before retrying with exponential backoff\n                await new Promise(resolve =>\n                    setTimeout(resolve, delay * Math.pow(backoffFactor, attempts - 1)),\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Forces a fresh fetch, bypassing cache\n     */\n    refresh(): Promise<T | null> {\n        return this.fetch(true);\n    }\n\n    /**\n     * Cleans up by aborting any in-flight request\n     */\n    override dispose(): void {\n        if (this.abortController) {\n            this.abortController.abort();\n        }\n        super.dispose();\n    }\n\n    /**\n     * Checks if cached data is still valid based on TTL\n     */\n    private isCacheValid(): boolean {\n        if (!this.options.cache?.enabled) return false;\n        if (!this.value.data) return false;\n\n        const ttl = this.options.cache.ttl || 5 * 60 * 1000; // Default 5 minutes\n        return Date.now() - this.value.timestamp < ttl;\n    }\n}\n\n/**\n * Factory function to create AsyncSignal instances\n *\n * @example\n * // Example 1: Simple user fetch with caching\n * const userSignal = asyncSignal(\n *   async () => {\n *     const response = await fetch('/api/user');\n *     return response.json();\n *   },\n *   {\n *     cache: { enabled: true, ttl: 60000 } // Cache for 1 minute\n *   }\n * );\n *\n * @example\n * // Example 2: Weather API with retries\n * const weatherSignal = asyncSignal(\n *   async () => {\n *     const response = await fetch('https://api.weather.com/current');\n *     return response.json();\n *   },\n *   {\n *     retryConfig: {\n *       attempts: 3,\n *       delay: 1000,\n *       backoffFactor: 2\n *     }\n *   }\n * );\n *\n * @example\n * // Example 3: Todo list with error handling\n * const todoSignal = asyncSignal(\n *   async () => {\n *     const response = await fetch('/api/todos');\n *     if (!response.ok) throw new Error('Failed to fetch todos');\n *     return response.json();\n *   },\n *   {\n *     onError: (error) => console.error('Todo fetch failed:', error),\n *     onSuccess: (todos) => console.log('Fetched todos:', todos.length)\n *   }\n * );\n */\nexport function asyncSignal<T, E = Error>(\n    fetchFn: () => Promise<T>,\n    options?: AsyncSignalOptions<T, E>,\n): AsyncSignal<T, E> {\n    return new AsyncSignal(fetchFn, options);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\nimport { Computation } from './computation';\nimport { Context } from './context';\nimport { Signal } from './signal';\nimport type { SignalOptions, WritableSignal } from './interfaces';\nimport { CircularDependencyError, SignalDisposedError } from './errors';\n\n/**\n * Signal that derives its value from other signals\n *\n * @example\n * // Create base signals\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n *\n * // Create a computed signal that depends on firstName and lastName\n * const fullName = new ComputedSignal(() => {\n *   return `${firstName.value} ${lastName.value}`;\n * });\n *\n * console.log(fullName.value); // Output: \"John Doe\"\n *\n * // When a dependency changes, the computed value updates automatically\n * firstName.value = 'Jane';\n * console.log(fullName.value); // Output: \"Jane Doe\"\n */\nexport class ComputedSignal<T> extends Signal<T> {\n\n    /** Internal computation instance to manage dependencies and recomputation */\n    private readonly computation: Computation;\n\n    /** Function that computes the derived value */\n    private computeFn: () => T;\n\n    /**\n     * Creates a new computed signal\n     * @param compute Function that derives the signal value\n     * @param options Configuration options for the signal\n     */\n    constructor(compute: () => T, options: SignalOptions<T> = {}) {\n        super({} as T, options);\n        this.computeFn = compute;\n\n        // Create an anonymous computation class instance\n        this.computation = new class ComputationA extends Computation {\n            constructor(private signal: ComputedSignal<T>) {\n                super();\n            }\n\n            /**\n             * Recomputes the signal value when dependencies change\n             */\n            recompute(): void {\n                if (this.disposed) return;\n\n                const context = Context.getInstance();\n                const prevComputation = context.getCurrentComputation();\n                context.setCurrentComputation(this);\n\n                // Prevent circular dependencies through effects\n                if (context.isInEffect()) {\n                    throw new CircularDependencyError(\n                        `Cannot create computed signal that depends on effects`,\n                    );\n                }\n\n                try {\n                    // Check if any dependencies have been disposed\n                    for (const dep of this.dependencies) {\n                        if (dep.isDisposed()) {\n                            this.signal.dispose();\n                            throw new SignalDisposedError('read from disposed dependency');\n                        }\n                    }\n\n                    // Compute new value and update if changed\n                    const newValue = this.signal.computeFn();\n                    if (!this.signal.equals(this.signal._value, newValue)) {\n                        this.signal._value = newValue;\n                        this.signal.notifyDependents();\n                    }\n                } catch (error) {\n                    // Handle disposal errors\n                    if (error instanceof SignalDisposedError) {\n                        this.signal.dispose();\n                    }\n                    throw error;\n                } finally {\n                    // Restore previous computation context\n                    if (prevComputation) {\n                        context.setCurrentComputation(prevComputation);\n                    }\n                    this.dirty = false;\n                }\n            }\n        }(this);\n        // Initial computation\n        this.computation.recompute();\n\n    }\n\n    /**\n     * Gets the current value of the computed signal\n     */\n    override get value(): T {\n        if (this.disposed) {\n            throw new SignalDisposedError('read from');\n        }\n\n        // Verify dependencies are still valid\n        const dependencies = this.computation['dependencies'] as Set<WritableSignal<any>>;\n        for (const dep of dependencies) {\n            if (dep.isDisposed()) {\n                this.dispose();\n                throw new SignalDisposedError('read from disposed dependency');\n            }\n        }\n\n        // Recompute if dependencies have changed\n        if (this.computation.isDirty()) {\n            this.computation.recompute();\n        }\n\n        // Track this signal as a dependency for other computations\n        this.trackDependency();\n        return this._value;\n    }\n\n    /**\n     * Computed signals cannot be set directly\n     */\n    override set value(_: T) {\n        throw new Error('Cannot set the value of a computed signal');\n    }\n\n    /**\n     * Gets the depth of this signal in the dependency graph\n     */\n    getDepth(): number {\n        return this.computation.getDepth();\n    }\n\n    /**\n     * Cleans up the signal and its dependencies\n     */\n    override dispose(): void {\n        if (this.disposed) return;\n\n        super.dispose();\n        this.computation.dispose();\n\n        // Recursively dispose dependent computed signals\n        for (const dependent of this.dependents) {\n            // @ts-ignore\n            if (dependent instanceof ComputedSignal || dependent['signal'] instanceof ComputedSignal) {\n                // @ts-ignore\n                const signal = dependent instanceof ComputedSignal ? dependent : dependent['signal'];\n                signal.dispose();\n            }\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Signal } from './signal';\nimport { ComputedSignal } from './computedSignal';\nimport type { SignalOptions } from './interfaces';\n\n\n\n/**\n * Create a computed signal that derives its value from other signals\n */\nexport function computed<T>(\n    compute: () => T,\n    options?: SignalOptions<T>,\n): Signal<T> {\n    return new ComputedSignal(compute, options);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Signal, SignalOptions } from '../core';\nimport { computed } from '../core/computed';\n\n/**\n * Combines multiple signals into a single signal containing an array of their values.\n * When any of the input signals change, the combined signal updates with all current values.\n *\n * @template T - Tuple type representing the types of values from each input signal\n *\n * @param signals - An array of signals to combine. Each signal can have a different type,\n *                 represented by the corresponding type in the tuple T.\n * @param options - Optional configuration options for the resulting signal, including\n *                 custom equality comparison and naming.\n *\n * @returns A new signal containing an array of the current values from all input signals.\n *          The returned signal updates whenever any input signal changes.\n *\n * @example\n * // Combining signals of different types\n * const nameSignal = new Signal<string>('John');\n * const ageSignal = new Signal<number>(25);\n * const activeSignal = new Signal<boolean>(true);\n *\n * const combined = combine([nameSignal, ageSignal, activeSignal]);\n * console.log(combined.value); // ['John', 25, true]\n *\n * nameSignal.value = 'Jane';\n * console.log(combined.value); // ['Jane', 25, true]\n *\n * @example\n * // Using with custom equality function\n * const combined = combine([sig1, sig2], {\n *   equals: (prev, next) =>\n *     prev.length === next.length &&\n *     prev.every((val, idx) => Object.is(val, next[idx]))\n * });\n */\nexport function combine<T extends any[]>(\n    signals: { [K in keyof T]: Signal<T[K]> },\n    options?: SignalOptions<T>,\n): Signal<T> {\n    // dependencies on all input signals through their .value accessors\n    return computed(() => (signals.map(s => s.value) as T), {\n        // Ensure updates are propagated by using appropriate equality check\n        equals: options?.equals ?? ((prev, next) => {\n            if (!prev || !next || prev.length !== next.length) return false;\n            return prev.every((val, idx) => Object.is(val, next[idx]));\n        }),\n        name: options?.name || `Signal(combine)[${signals.map(s => s.toString()).join(', ')}]`,\n    });\n\n\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { Disposable, IEffect } from './interfaces';\nimport { Computation } from './computation';\nimport { Context } from './context';\nimport { Cleanup, EffectFunction } from './types';\n\n\n/**\n * Implementation of reactive effects that automatically track and respond to signal changes.\n * Effects are used to perform side effects in response to reactive updates.\n *\n * @example\n * // Basic effect usage\n * const count = new Signal(0);\n * const dispose = effect(() => {\n *   console.log(`Count changed to: ${count.value}`);\n * });\n * count.value = 1; // Logs: \"Count changed to: 1\"\n * dispose(); // Cleanup effect\n *\n * @example\n * // Effect with cleanup\n * const visible = new Signal(true);\n * const dispose = effect(() => {\n *   if (visible.value) {\n *     const element = document.createElement('div');\n *     document.body.appendChild(element);\n *     // Return cleanup function\n *     return () => {\n *       document.body.removeChild(element);\n *     };\n *   }\n * });\n *\n * @example\n * // Named effect for debugging\n * const timer = new Signal(0);\n * const dispose = effect(() => {\n *   console.log(`Timer: ${timer.value}`);\n * }, 'timerLogger');\n *\n * @example\n * // Effect with multiple dependencies\n * const firstName = new Signal('John');\n * const lastName = new Signal('Doe');\n * const dispose = effect(() => {\n *   console.log(`Name changed to: ${firstName.value} ${lastName.value}`);\n * });\n *\n * @example\n * // Effect with error handling\n * const data = new Signal<string | Error>(null);\n * const dispose = effect(() => {\n *   try {\n *     if (data.value instanceof Error) {\n *       console.error('Error:', data.value);\n *     } else {\n *       console.log('Data:', data.value);\n *     }\n *   } catch (error) {\n *     console.error('Effect error:', error);\n *   }\n * });\n */\nexport class EffectImpl implements IEffect {\n    /**\n     * The computation that tracks dependencies and handles recomputation\n     */\n    private readonly computation: Computation;\n\n    /**\n     * Cleanup function from the previous effect execution\n     */\n    cleanup: Cleanup | undefined;\n\n    /**\n     * Flag indicating whether the effect has been disposed\n     */\n    disposed = false;\n\n    /**\n     * Creates a new effect instance\n     *\n     * @param fn - The effect function that may return a cleanup function\n     * @param name - Optional name for debugging purposes\n     */\n    constructor(fn: EffectFunction, name?: string) {\n        this.computation = new class EffectIm extends Computation {\n            // @ts-ignore\n            constructor(private effect: EffectImpl, private fn: EffectFunction) {\n                super(name);\n            }\n\n            /**\n             * Recomputes the effect when dependencies change\n             * Handles proper context management and error boundaries\n             */\n            recompute(): void {\n                if (this.disposed) return;\n\n                const context = Context.getInstance();\n                context.pushComputation(this);\n\n                try {\n                    context.pushComputation(this);\n                    context.registerEffect(this.effect);\n                    this.effect.runEffect();\n                } finally {\n                    context.unregisterEffect(this.effect);\n                    context.popComputation();\n                    this.dirty = false;\n                }\n            }\n        }(this, fn);\n\n        // Initial computation\n        this.computation.recompute();\n    }\n\n    /**\n     * Disposes of the effect, running cleanup and preventing further executions\n     */\n    dispose(): void {\n        if (this.disposed) return;\n\n        this.disposed = true;\n        if (this.cleanup) {\n            try {\n                this.cleanup();\n            } catch (error) {\n                console.error('Error in effect cleanup:', error);\n            }\n        }\n        this.computation.dispose();\n    }\n\n    /**\n     * Executes the effect function and manages cleanup\n     * Handles error boundaries for both effect and cleanup execution\n     */\n    runEffect(): void {\n        if (this.disposed) return;\n\n        // Run cleanup from previous execution\n        if (this.cleanup) {\n            try {\n                this.cleanup();\n            } catch (error) {\n                console.error('Error in effect cleanup:', error);\n            }\n        }\n\n        try {\n            // @ts-ignore - We know this exists from the constructor\n            this.cleanup = this.computation['fn']();\n        } catch (error) {\n            console.error('Error in effect:', error);\n            throw error;\n        }\n    }\n}\n\n/**\n * Creates a new effect that automatically tracks and responds to signal changes\n *\n * @param fn - Effect function that may return a cleanup function\n * @param name - Optional name for debugging purposes\n * @returns A disposable object to cleanup the effect\n *\n * @example\n * // DOM manipulation effect\n * const isVisible = new Signal(true);\n * const dispose = effect(() => {\n *   const element = document.querySelector('.target');\n *   element.style.display = isVisible.value ? 'block' : 'none';\n * });\n *\n * @example\n * // Effect with async operations\n * const userId = new Signal<number | null>(null);\n * const dispose = effect(() => {\n *   const id = userId.value;\n *   if (id !== null) {\n *     let cancelled = false;\n *     fetchUserData(id).then(data => {\n *       if (!cancelled) {\n *         // Handle data\n *       }\n *     });\n *     return () => {\n *       cancelled = true;\n *     };\n *   }\n * });\n */\nexport function effect(fn: EffectFunction, name?: string): Disposable {\n    return new EffectImpl(fn, name);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Signal } from './signal';\nimport type { SignalOptions } from './interfaces';\n\n/**\n * Create a new writable signal\n */\nexport function createSignal<T>(\n    initialValue: T,\n    options?: SignalOptions<T>,\n): Signal<T> {\n    return new Signal(initialValue, options);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { Context } from './context';\n\n/**\n * Batch multiple signal updates to prevent cascading updates\n */\nexport function batch<T>(fn: () => T): T {\n    const context = Context.getInstance();\n    context.beginBatch();\n    try {\n        return fn();\n    } finally {\n        context.endBatch();\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n/**\n * Default equality function for comparing signal values\n * Uses Object.is for strict equality comparison\n */\nexport const defaultEquals = <T>(a: T, b: T): boolean => Object.is(a, b);\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { effect, Signal } from '../core';\n\n/**\n * Debug utility to track signal updates\n */\nexport function debug<T>(signal: Signal<T>, name: string): Signal<T> {\n    effect(() => {\n        console.log(`[Signal Debug] ${name}:`, signal.value);\n    }, `debug-${name}`);\n    return signal;\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { SignalMetrics } from '../core';\n\n/**\n * Monitor signal performance metrics\n */\nexport class SignalMonitor {\n    private static metrics: SignalMetrics = {\n        updates: 0,\n        computations: 0,\n        maxChainDepth: 0,\n        averageUpdateTime: 0,\n    };\n\n    private static updateTimes: number[] = [];\n\n    static trackUpdate(duration: number): void {\n        this.metrics.updates++;\n        this.updateTimes.push(duration);\n\n        if (this.updateTimes.length > 100) {\n            this.updateTimes.shift();\n        }\n\n        this.metrics.averageUpdateTime =\n            this.updateTimes.reduce((a, b) => a + b, 0) / this.updateTimes.length;\n    }\n\n    static trackComputation(depth: number): void {\n        this.metrics.computations++;\n        this.metrics.maxChainDepth = Math.max(this.metrics.maxChainDepth, depth);\n    }\n\n    static getMetrics(): SignalMetrics {\n        return { ...this.metrics };\n    }\n\n    static reset(): void {\n        this.metrics = {\n            updates: 0,\n            computations: 0,\n            maxChainDepth: 0,\n            averageUpdateTime: 0,\n        };\n        this.updateTimes = [];\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\n\nimport { ComputedSignal, Signal, Context, UpdateQueue } from '../core';\nimport { SignalMonitor } from './signalMonitor';\n\n/**\n * Reset the entire signal system state\n * Useful for testing and debugging\n */\nexport function resetSignalSystem(): void {\n    // @ts-ignore\n    Context['instance'] = undefined;\n    // @ts-ignore\n    UpdateQueue['instance'] = undefined;\n    SignalMonitor.reset();\n}\n\n\n/**\n * Custom JSON serializer for signals\n * Useful for debugging and persistence\n */\nexport const serializeSignal = <T>(signal: Signal<T>): string => {\n    return JSON.stringify({\n        value: signal.value,\n        // @ts-ignore - accessing protected property for serialization\n        name: signal['name'],\n        // @ts-ignore - accessing protected property for serialization\n        disposed: signal['disposed'],\n    });\n};\n\n/**\n * Type guard to check if a value is a Signal\n */\nexport function isSignal<T>(value: any): value is Signal<T> {\n    return value instanceof Signal;\n}\n\n/**\n * Get the current computation depth of a signal chain\n */\nexport function getSignalDepth(signal: Signal<any>): number {\n    if (signal instanceof ComputedSignal) {\n        return signal.getDepth();\n    }\n    return 0;\n}\n\n/**\n * Check if a signal is part of a circular dependency chain\n */\nexport function hasCircularDependency(signal: Signal<any>): boolean {\n    const visited = new Set<Signal<any>>();\n    const recursionStack = new Set<Signal<any>>();\n\n    function dfs(current: Signal<any>): boolean {\n        if (recursionStack.has(current)) {\n            return true;\n        }\n        if (visited.has(current)) {\n            return false;\n        }\n\n        visited.add(current);\n        recursionStack.add(current);\n\n        // @ts-ignore - accessing protected property for cycle detection\n        const dependents = current['dependents'] || new Set();\n        for (const dependent of dependents) {\n            // @ts-ignore - accessing protected property for cycle detection\n            if (dependent['computation']?.signal && dfs(dependent['computation'].signal)) {\n                return true;\n            }\n        }\n\n        recursionStack.delete(current);\n        return false;\n    }\n\n    return dfs(signal);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { createSignal, effect, Signal, SignalOptions } from '../core';\n\n/**\n * Creates a debounced signal that updates its value after a specified delay\n * when the source signal changes.\n *\n * @param source Source signal to watch for changes\n * @param delay Time in milliseconds to wait before updating output\n * @param options Optional signal configuration\n *\n * @example\n * // Basic debouncing of rapid updates\n * const input = new Signal(\"\");\n * const debouncedInput = debounced(input, 300);\n *\n * input.value = \"h\";    // t=0ms\n * input.value = \"he\";   // t=100ms\n * input.value = \"hel\";  // t=200ms\n * input.value = \"hell\"; // t=250ms\n *\n * // debouncedInput.value will be \"hell\" at t=550ms\n *\n * @example\n * // Search input with debouncing\n * const searchQuery = new Signal(\"\");\n * const debouncedSearch = debounced(searchQuery, 500);\n *\n * effect(() => {\n *   // API call only happens 500ms after last keystroke\n *   fetchSearchResults(debouncedSearch.value);\n * });\n *\n * @example\n * // Form validation with debouncing\n * const formData = new Signal({ username: \"\", email: \"\" });\n * const debouncedForm = debounced(formData, 400, {\n *   equals: (a, b) => a.username === b.username && a.email === b.email\n * });\n *\n * effect(() => {\n *   // Validation runs 400ms after user stops typing\n *   validateForm(debouncedForm.value);\n * });\n */\nexport function debounced<T>(\n    source: Signal<T>,\n    delay: number,\n    options?: SignalOptions<T>,\n): Signal<T> {\n    const output = createSignal(source.value, options);\n    let timeoutId: NodeJS.Timeout | undefined;\n\n    effect(() => {\n        const value = source.value;\n        if (timeoutId) clearTimeout(timeoutId);\n\n        timeoutId = setTimeout(() => {\n            output.value = value;\n        }, delay);\n\n        return () => {\n            if (timeoutId) clearTimeout(timeoutId);\n        };\n    });\n\n    return output;\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { createSignal, effect, Signal, SignalOptions } from '../core';\n\n/**\n * Creates a filtered signal that only updates when the predicate returns true.\n * The output signal follows the source signal's values but only changes when\n * the new value satisfies the given predicate.\n *\n * @param source The input signal to filter\n * @param predicate Function that determines if a value should pass through\n * @param options Optional configuration for the output signal\n * @returns A new signal that only updates when predicate returns true\n *\n * @example\n * const numbers = new Signal(0);\n * const evenNumbers = filtered(numbers, n => n % 2 === 0);\n * numbers.value = 1; // evenNumbers remains 0\n * numbers.value = 2; // evenNumbers updates to 2\n */\nexport function filtered<T>(\n    source: Signal<T>,\n    predicate: (value: T) => boolean,\n    options?: SignalOptions<T>,\n): Signal<T> {\n    const output = createSignal(source.value, options);\n\n    effect(() => {\n        const value = source.value;\n        if (predicate(value)) {\n            output.value = value;\n        }\n    });\n\n    return output;\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { computed, Signal, SignalOptions } from '../core';\n\n/**\n * Creates a new Signal that transforms the value of a source Signal using a mapping function.\n * The resulting Signal updates automatically when the source Signal changes.\n *\n * @param source The input Signal to transform\n * @param transform Function that converts source value type T to output type U\n * @param options Optional configuration for the resulting Signal\n * @returns A new Signal containing the transformed value\n *\n *\n * @example\n * // Basic transformation of primitive values\n * const count = new Signal(5);\n * const doubled = map(count, n => n * 2);\n * console.log(doubled.value); // 10\n * count.value = 10;\n * console.log(doubled.value); // 20\n *\n * @example\n * // Transforming arrays\n * const numbers = new Signal([1, 2, 3]);\n * const doubled = map(numbers, nums => nums.map(n => n * 2));\n * console.log(doubled.value); // [2, 4, 6]\n *\n * @example\n * // Transforming objects with custom options\n * const user = new Signal({ name: 'John', age: 30 });\n * const userSummary = map(\n *   user,\n *   u => `${u.name} is ${u.age} years old`,\n *   { name: 'userSummary' }\n * );\n * console.log(userSummary.value); // \"John is 30 years old\"\n */\nexport function map<T, U>(\n    source: Signal<T>,\n    transform: (value: T) => U,\n    options?: SignalOptions<U>,\n): Signal<U> {\n    return computed(() => transform(source.value), options);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { Signal, Context } from '../core';\n\n\n/**\n * Retrieves the current value of a signal without establishing a dependency relationship.\n * This is useful when you want to read a signal's value without having the current computation\n * track it as a dependency, effectively \"peeking\" at the value without subscribing to changes.\n *\n * @template T The type of value held by the signal\n * @param signal The signal whose value you want to peek at\n * @returns The current value of the signal\n *\n * @description\n * The function works by temporarily manipulating the computation stack:\n * 1. Stores the current computation (if any) from the context\n * 2. Pushes undefined as a temporary computation to prevent dependency tracking\n * 3. Reads the signal's value\n * 4. Restores the previous computation state\n *\n * This approach ensures that when we read the signal's value, it won't be tracked\n * as a dependency in any active computation scope.\n *\n * @example\n * const counter = new Signal(0);\n * // Reading value normally would create a dependency\n * const normalRead = counter.value;\n * // Peeking at value doesn't create a dependency\n * const peekedValue = peek(counter);\n *\n * @example\n * // Useful in computed signals when you need a value for calculation\n * // but don't want to track changes to that specific signal\n * const total = computed(() => {\n *   const current = counter.value;  // Creates dependency\n *   const threshold = peek(maxValue);  // Reads value without dependency\n *   return current > threshold ? current : threshold;\n * });\n */\nexport function peek<T>(signal: Signal<T>): T {\n    const context = Context.getInstance();\n    const prevComputation = context.getCurrentComputation();\n    // @ts-ignore\n    context.setCurrentComputation(undefined);\n    try {\n        return signal.get_value_bypass_tracking(); // Directly access value to bypass dependency tracking\n    } finally {\n        if (prevComputation) {\n            context.setCurrentComputation(prevComputation);\n        }\n    }\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\nimport { createSignal, Signal } from '../core';\n\n/**\n * Represents an item in the queue with priority and timestamp.\n */\nexport interface QueueItem<T> {\n    id: string;          // Unique identifier for the item\n    data: T;            // The actual data stored in the queue\n    priority: number;   // Priority level (higher numbers = higher priority)\n    timestamp: number;  // Used for FIFO ordering within same priority\n}\n\n/**\n * A priority queue implementation using signals for reactive state management.\n * Items are ordered by priority (highest first) and timestamp (FIFO for same priority).\n *\n * @example\n * // Basic queue operations\n * const taskQueue = createQueueSignal<string>();\n *\n * // Add tasks with different priorities\n * taskQueue.enqueue(\"Low priority task\", 1);\n * taskQueue.enqueue(\"High priority task\", 3);\n * taskQueue.enqueue(\"Medium priority task\", 2);\n *\n * console.log(taskQueue.peek()); // \"High priority task\"\n * console.log(taskQueue.dequeue()); // \"High priority task\"\n * console.log(taskQueue.size()); // 2\n *\n * @example\n * // Task processing with priorities\n * const processingQueue = createQueueSignal<{task: string, urgency: string}>();\n *\n * // Emergency task (priority 3)\n * const emergencyId = processingQueue.enqueue(\n *   {task: \"Server down\", urgency: \"high\"},\n *   3\n * );\n *\n * // Regular tasks (priority 1)\n * processingQueue.enqueue({task: \"Update docs\", urgency: \"low\"}, 1);\n * processingQueue.enqueue({task: \"Code review\", urgency: \"low\"}, 1);\n *\n * // Process emergency first\n * while (!processingQueue.isEmpty()) {\n *   const task = processingQueue.dequeue();\n *   console.log(`Processing: ${task.task}`);\n * }\n *\n * @example\n * // Reactive queue monitoring\n * const downloadQueue = createQueueSignal<string>();\n * const queueSignal = downloadQueue.getQueue();\n *\n * effect(() => {\n *   const items = queueSignal.value;\n *   console.log(`Queue size changed: ${items.length} items`);\n * });\n *\n * downloadQueue.enqueue(\"file1.txt\");\n * downloadQueue.enqueue(\"file2.txt\");\n */\nexport class QueueSignal<T> {\n    private queue: Signal<QueueItem<T>[]>;\n\n    constructor() {\n        this.queue = createSignal<QueueItem<T>[]>([]);\n    }\n\n    /**\n     * Adds an item to the queue with optional priority.\n     * @param data The item to add\n     * @param priority Priority level (higher = more priority)\n     * @returns Unique ID for the queued item\n     */\n    enqueue(data: T, priority: number = 0): string {\n        const id = Math.random().toString(36).substring(2);\n        const item: QueueItem<T> = {\n            id,\n            data,\n            priority,\n            timestamp: Date.now(),\n        };\n\n        this.queue.value = [...this.queue.value, item].sort(\n            (a, b) => b.priority - a.priority || a.timestamp - b.timestamp,\n        );\n\n        return id;\n    }\n\n    /**\n     * Removes and returns the highest priority item.\n     * @returns The data of the dequeued item, or undefined if queue is empty\n     */\n    dequeue(): T | undefined {\n        if (this.isEmpty()) return undefined;\n        const [item, ...rest] = this.queue.value;\n        this.queue.value = rest;\n        return item?.data;\n    }\n\n    /**\n     * Views the next item without removing it.\n     * @returns The data of the next item, or undefined if queue is empty\n     */\n    peek(): T | undefined {\n        return this.queue.value[0]?.data;\n    }\n\n    /**\n     * Removes a specific item by its ID.\n     * @param id ID of the item to remove\n     * @returns true if an item was removed, false otherwise\n     */\n    remove(id: string): boolean {\n        const initialLength = this.queue.value.length;\n        this.queue.value = this.queue.value.filter(item => item.id !== id);\n        return initialLength !== this.queue.value.length;\n    }\n\n    /**\n     * Removes all items from the queue.\n     */\n    clear(): void {\n        this.queue.value = [];\n    }\n\n    /**\n     * Checks if the queue is empty.\n     */\n    isEmpty(): boolean {\n        return this.queue.value.length === 0;\n    }\n\n    /**\n     * Returns the number of items in the queue.\n     */\n    size(): number {\n        return this.queue.value.length;\n    }\n\n    /**\n     * Gets the underlying signal for reactive queue monitoring.\n     * @returns Signal containing the queue items\n     */\n    getQueue(): Signal<QueueItem<T>[]> {\n        return this.queue;\n    }\n}\n\n/**\n * Creates a new queue signal instance.\n * @example\n * // Basic queue operations\n * const taskQueue = createQueueSignal<string>();\n *\n * // Add tasks with different priorities\n * taskQueue.enqueue(\"Low priority task\", 1);\n * taskQueue.enqueue(\"High priority task\", 3);\n * taskQueue.enqueue(\"Medium priority task\", 2);\n *\n * console.log(taskQueue.peek()); // \"High priority task\"\n * console.log(taskQueue.dequeue()); // \"High priority task\"\n * console.log(taskQueue.size()); // 2\n *\n * @example\n * // Task processing with priorities\n * const processingQueue = createQueueSignal<{task: string, urgency: string}>();\n *\n * // Emergency task (priority 3)\n * const emergencyId = processingQueue.enqueue(\n *   {task: \"Server down\", urgency: \"high\"},\n *   3\n * );\n *\n * // Regular tasks (priority 1)\n * processingQueue.enqueue({task: \"Update docs\", urgency: \"low\"}, 1);\n * processingQueue.enqueue({task: \"Code review\", urgency: \"low\"}, 1);\n *\n * // Process emergency first\n * while (!processingQueue.isEmpty()) {\n *   const task = processingQueue.dequeue();\n *   console.log(`Processing: ${task.task}`);\n * }\n *\n * @example\n * // Reactive queue monitoring\n * const downloadQueue = createQueueSignal<string>();\n * const queueSignal = downloadQueue.getQueue();\n *\n * effect(() => {\n *   const items = queueSignal.value;\n *   console.log(`Queue size changed: ${items.length} items`);\n * });\n *\n * @returns A new QueueSignal instance\n */\nexport function createQueueSignal<T>(): QueueSignal<T> {\n    return new QueueSignal<T>();\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { createSignal, effect, Signal, SignalOptions } from '../core';\n\n/**\n * Create a signal that throttles updates\n */\nexport function throttled<T>(\n    source: Signal<T>,\n    interval: number,\n    options?: SignalOptions<T>,\n): Signal<T> {\n    const output = createSignal(source.value, options);\n    let lastUpdate = 0;\n    let timeoutId: NodeJS.Timeout | undefined;\n\n    effect(() => {\n        const value = source.value;\n        const now = Date.now();\n\n        if (now - lastUpdate >= interval) {\n            output.value = value;\n            lastUpdate = now;\n        } else if (!timeoutId) {\n            timeoutId = setTimeout(() => {\n                output.value = value;\n                lastUpdate = Date.now();\n                timeoutId = undefined;\n            }, interval - (now - lastUpdate));\n        }\n\n        return () => {\n            if (timeoutId) clearTimeout(timeoutId);\n        };\n    });\n\n    return output;\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { computed, Signal, SignalOptions } from '../core';\nimport { peek } from './peek';\n\n/**\n * Creates a Signal that only updates when the source value changes by at least the specified delta.\n * Useful for filtering out small fluctuations in numeric values.\n *\n * @param source - Input Signal containing numeric values\n * @param delta - Minimum change required to trigger an update\n * @param options - Optional Signal configuration\n * @returns A new Signal that updates only on significant changes\n *\n * @example\n * const rawTemp = new Signal(20.0);\n * const filteredTemp = threshold(rawTemp, 0.5);\n * rawTemp.value = 20.2; // filteredTemp stays at 20.0\n * rawTemp.value = 20.6; // filteredTemp updates to 20.6\n */\nexport function threshold<T extends number>(\n    source: Signal<T>,\n    delta: number,\n    options?: SignalOptions<T>,\n): Signal<T> {\n    return computed(() => {\n        const value = source.value;\n        const prevValue = peek(source);\n        return Math.abs(value - prevValue) >= delta ? value : prevValue;\n    }, {\n        ...options,\n        equals: (a, b) => Math.abs(a - b) < delta,\n    });\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { computed, createSignal, Signal, SignalOptions } from '../core';\n\n/**\n * Creates a Signal with validation capabilities.\n *\n * @template T - Type of value stored in the signal\n * @param initialValue - Starting value of the signal\n * @param validator - Function that validates new values before they're set\n * @param options - Standard SignalOptions configuration\n * @returns A Signal with validation logic applied to value updates\n *\n * @example\n * // Create a signal that only accepts positive numbers\n * const positiveNum = validated(1,\n *   (value) => value > 0 || \"Value must be positive\"\n * );\n *\n * @example\n * // Create a signal with complex validation and custom equality\n * const user = validated(\n *   { id: 1, name: \"John\" },\n *   (value) => {\n *     if (!value.name) return \"Name is required\";\n *     if (value.id < 0) return \"ID must be positive\";\n *     return true;\n *   },\n *   { equals: (a, b) => a.id === b.id }\n * );\n */\nexport function validated<T>(\n    initialValue: T,\n    validator: (value: T) => boolean | string,\n    options?: SignalOptions<T>,\n): Signal<T> {\n    const innerSignal = createSignal(initialValue, options);\n    const validationError = computed(() => {\n        const result = validator(innerSignal.value);\n        if (typeof result === 'string') return result;\n        if (!result) return 'Validation failed';\n        return null;\n    });\n\n    return new Proxy(innerSignal, {\n        get(target, prop) {\n            if (prop === 'value') {\n                const error = validationError.value;\n                if (error) throw new Error(error);\n                return target.value;\n            }\n            return target[prop as keyof typeof target];\n        },\n        set(target, prop, value) {\n            if (prop === 'value') {\n                const result = validator(value);\n                if (typeof result === 'string') throw new Error(result);\n                if (!result) throw new Error('Validation failed');\n                target.value = value;\n            }\n            return true;\n        },\n    });\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { effect, Signal, SignalDisposedError, SignalOptions } from '../core';\n\n/**\n * Interface for storage providers to get, set and remove persisted values\n */\nexport interface StorageProvider<T> {\n    /** Retrieves value by key, returns null if not found */\n    getItem(key: string): T | null;\n\n    /** Stores value with given key */\n    setItem(key: string, value: T): void;\n\n    /** Removes value with given key */\n    removeItem(key: string): void;\n}\n\n/**\n * Uses browser localStorage for persistent storage across sessions\n * Falls back gracefully when not in browser environment\n */\nexport class LocalStorageProvider<T> implements StorageProvider<T> {\n    /**\n     * Gets item from localStorage\n     * @param key - Key to retrieve\n     * @returns Stored value or null if not found/not in browser\n     */\n    getItem(key: string): T | null {\n        if (typeof window === 'undefined') return null;\n        const presented = window.localStorage.getItem(key);\n        if (presented) {\n            return JSON.parse(presented);\n        }\n        return null;\n    }\n\n    /**\n     * Sets item in localStorage\n     * @param key - Key to store under\n     * @param value - Value to store\n     */\n    setItem(key: string, value: T): void {\n        if (typeof window === 'undefined') return;\n        window.localStorage.setItem(key, JSON.stringify(value));\n    }\n\n    /**\n     * Removes item from localStorage\n     * @param key - Key to remove\n     */\n    removeItem(key: string): void {\n        if (typeof window === 'undefined') return;\n        window.localStorage.removeItem(key);\n    }\n}\n\n/**\n * Uses browser sessionStorage for temporary storage during session\n * Falls back gracefully when not in browser environment\n */\nexport class SessionStorageProvider<T> implements StorageProvider<T> {\n    /**\n     * Gets item from sessionStorage\n     * @param key - Key to retrieve\n     * @returns Stored value or null if not found/not in browser\n     */\n    getItem(key: string): T | null {\n        if (typeof window === 'undefined') return null;\n        const presented = window.sessionStorage.getItem(key);\n        if (presented) {\n            return JSON.parse(presented);\n        }\n        return null;\n    }\n\n    /**\n     * Sets item in sessionStorage\n     * @param key - Key to store under\n     * @param value - Value to store\n     */\n    setItem(key: string, value: T): void {\n        if (typeof window === 'undefined') return;\n        window.sessionStorage.setItem(key, JSON.stringify(value));\n    }\n\n    /**\n     * Removes item from sessionStorage\n     * @param key - Key to remove\n     */\n    removeItem(key: string): void {\n        if (typeof window === 'undefined') return;\n        window.sessionStorage.removeItem(key);\n    }\n}\n\n/**\n * In-memory storage provider for testing and SSR environments\n * Data persists only during runtime\n */\nexport class MemoryStorageProvider<T> implements StorageProvider<T> {\n    /** Map to store key-value pairs in memory */\n    private store = new Map<string, T>();\n\n    /**\n     * Gets item from memory store\n     * @param key - Key to retrieve\n     * @returns Stored value or null if not found\n     */\n    getItem(key: string): T | null {\n        return this.store.get(key) ?? null;\n    }\n\n    /**\n     * Sets item in memory store\n     * @param key - Key to store under\n     * @param value - Value to store\n     */\n    setItem(key: string, value: T): void {\n        this.store.set(key, value);\n    }\n\n    /**\n     * Removes item from memory store\n     * @param key - Key to remove\n     */\n    removeItem(key: string): void {\n        this.store.delete(key);\n    }\n}\n\n\nexport type PersistedSignalStorage<T> = {\n    storage?: StorageProvider<T>;\n}\n\nexport type PersistedSignalSignalOptions<T> = SignalOptions<T> & PersistedSignalStorage<T>;\n\nexport class Persisted<T> extends Signal<T> {\n    disposed = false;\n    private readonly storage: StorageProvider<T>;\n    private readonly key: string;\n\n    constructor(\n        key: string,\n        initialValue: T,\n        storage: StorageProvider<T>,\n        options?: SignalOptions<T>,\n    ) {\n        const storedValue = storage.getItem(key);\n        super(storedValue ?? initialValue, options);\n\n        this.key = key;\n        this.storage = storage;\n\n        effect(() => {\n            if (this.disposed) return;\n            this.storage.setItem(this.key, this.value);\n        }, `persist-${key}`);\n    }\n\n    get value(): T {\n        if (this.disposed) {\n            throw new SignalDisposedError('Cannot read from disposed signal');\n        }\n        return super.value;\n    }\n\n    set value(newValue: T) {\n        if (this.disposed) {\n            throw new SignalDisposedError('Cannot write to disposed signal');\n        }\n        super.value = newValue;\n    }\n\n    update(fn: (current: T) => T): void {\n        if (this.disposed) {\n            throw new SignalDisposedError('Cannot update disposed signal');\n        }\n        this.value = fn(this.value);\n    }\n\n    dispose(): void {\n        if (this.disposed) return;\n        this.disposed = true;\n        this.storage.removeItem(this.key);\n        super.dispose();\n    }\n\n    reload(): void {\n        if (this.disposed) {\n            throw new SignalDisposedError('Cannot reload disposed signal');\n        }\n        const value = this.storage.getItem(this.key);\n        if (value !== null) {\n            this.value = value;\n        }\n    }\n\n    clear(): void {\n        if (this.disposed) {\n            throw new SignalDisposedError('Cannot clear disposed signal');\n        }\n        this.storage.removeItem(this.key);\n    }\n\n    isDisposed(): boolean {\n        return this.disposed;\n    }\n}\n\nexport function persisted<T>(\n    key: string,\n    initialValue: T,\n    storage: StorageProvider<T>,\n    options?: SignalOptions<T>,\n): Persisted<T> {\n    return new Persisted(key, initialValue, storage, options);\n}\n","/**\n * Copyright (c) 2024 Khaled Sameer <khaled.smq@hotmail.com>.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n **/\n\nimport { batch, computed, createSignal, defaultEquals, Signal, SignalOptions } from '../core';\n\n/**\n * Adds undo/redo functionality to a Signal by wrapping it with history tracking\n *\n * @param initialValue Initial value for the signal\n * @param maxHistory Maximum number of history states to maintain\n * @param options Signal configuration options\n * @returns Enhanced signal with undo/redo capabilities and history access\n */\nexport function withHistory<T>(\n    initialValue: T,\n    maxHistory: number = 10,\n    options?: SignalOptions<T>,\n): Signal<T> & {\n    undo(): void;\n    redo(): void;\n    history: Signal<T[]>;\n    canUndo: Signal<boolean>;\n    canRedo: Signal<boolean>;\n} {\n    // Use provided equals function or default\n    const equalsFn = options?.equals ?? defaultEquals;\n\n    const signal = createSignal(initialValue, {\n        ...options,\n        equals: equalsFn, // Ensure equals function is properly passed\n    });\n    const history = createSignal<T[]>([initialValue]);\n    const currentIndex = createSignal(0);\n\n    const canUndo = computed(() => currentIndex.value > 0);\n    const canRedo = computed(() => currentIndex.value < history.value.length - 1);\n\n    const wrapper = Object.create(signal) as Signal<T> & {\n        undo(): void;\n        redo(): void;\n        history: Signal<T[]>;\n        canUndo: Signal<boolean>;\n        canRedo: Signal<boolean>;\n    };\n\n    wrapper.history = history;\n    wrapper.canUndo = canUndo;\n    wrapper.canRedo = canRedo;\n\n    // Use batch for atomic updates\n    Object.defineProperty(wrapper, 'value', {\n        get: () => signal.value,\n        set: (newValue: T) => {\n            if (!equalsFn(signal.value, newValue)) {\n                batch(() => {\n                    const newIndex = currentIndex.value + 1;\n                    const newHistory = history.value\n                        .slice(0, newIndex)\n                        .concat([newValue]);\n\n                    if (newHistory.length > maxHistory) {\n                        newHistory.shift();\n                        currentIndex.value = newIndex - 1;\n                    } else {\n                        currentIndex.value = newIndex;\n                    }\n\n                    history.value = newHistory;\n                    signal.value = newValue;\n                });\n            }\n        },\n    });\n\n    wrapper.undo = () => {\n        if (canUndo.value) {\n            batch(() => {\n                currentIndex.value--;\n                signal.value = history.value[currentIndex.value] as T;\n            });\n        }\n    };\n\n    wrapper.redo = () => {\n        if (canRedo.value) {\n            batch(() => {\n                currentIndex.value++;\n                signal.value = history.value[currentIndex.value] as T;\n            });\n        }\n    };\n\n    return wrapper;\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","SignalDisposedError","Error","constructor","operation","super","this","name","CircularDependencyError","signalName","Context","computationStack","batchDepth","batchQueue","Set","activeEffects","getInstance","instance","getCurrentComputation","length","pushComputation","computation","includes","push","popComputation","pop","isBatching","beginBatch","endBatch","flushBatchQueue","addToBatchQueue","signal","add","uniqueSignals","clear","computations","dependent","getDependents","markDirty","setCurrentComputation","registerEffect","effect","unregisterEffect","delete","isInEffect","size","Base","initialValue","options","dependents","disposed","_value","equals","is","isCommutable","trackDependency","newValue","notifyDependents","get_value_bypass_tracking","update","fn","addDependent","removeDependent","context","dispose","dependentsToDispose","isDisposed","hasDependents","toString","addDependency","UpdateQueue","queue","processing","updateDepth","maxUpdateDepth","schedule","processQueue","Array","from","sort","a","b","getDepth","isDirty","recompute","Computation","dirty","dependencies","depth","has","removeDependency","clearDependencies","hasSignal","dep","oldDepth","maxDepth","Math","max","SubscriptionComputation","callback","prevComputation","Signal","subscribe","computed","AsyncSignal","fetchFn","data","loading","error","timestamp","abortController","fetch","force","isCacheValid","abort","AbortController","attempts","maxAttempts","retryConfig","delay","backoffFactor","Date","now","onSuccess","onError","Promise","resolve","setTimeout","pow","refresh","cache","enabled","ttl","asyncSignal","ComputedSignal","compute","computeFn","_","combine","signals","map","s","prev","next","every","val","idx","join","EffectImpl","runEffect","cleanup","createSignal","batch","defaultEquals","debug","SignalMonitor","trackUpdate","duration","metrics","updates","updateTimes","shift","averageUpdateTime","reduce","trackComputation","maxChainDepth","getMetrics","reset","resetSignalSystem","undefined","serializeSignal","JSON","stringify","isSignal","getSignalDepth","hasCircularDependency","visited","recursionStack","dfs","current","debounced","source","output","timeoutId","clearTimeout","filtered","predicate","transform","peek","QueueSignal","enqueue","priority","id","random","substring","item","dequeue","isEmpty","rest","remove","initialLength","filter","getQueue","createQueueSignal","throttled","interval","lastUpdate","threshold","delta","prevValue","abs","validated","validator","innerSignal","validationError","result","Proxy","target","set","LocalStorageProvider","getItem","window","presented","localStorage","parse","setItem","removeItem","SessionStorageProvider","sessionStorage","MemoryStorageProvider","store","Map","Persisted","storage","storedValue","reload","persisted","withHistory","maxHistory","equalsFn","history","currentIndex","canUndo","canRedo","wrapper","create","newIndex","newHistory","slice","concat","undo","redo"],"sourceRoot":""}