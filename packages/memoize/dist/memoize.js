class LRUCache{constructor(e){this.maxSize=e,this.cache=new Map}get(e){if(!this.cache.has(e))return;const t=this.cache.get(e);return this.cache.delete(e),this.cache.set(e,t),t}set(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxSize){const e=this.cache.keys().next().value;e&&this.cache.delete(e)}this.cache.set(e,t)}delete(e){this.cache.delete(e)}has(e){return this.cache.has(e)}}export function memoize(e,t={}){const{maxCacheSize:c=1/0,ttl:i}=t,s=new LRUCache(c),a=new WeakMap;let h=0;function n(e){return e.map((e=>{return"object"==typeof e&&null!==e?`object:${t=e,a.has(t)||a.set(t,++h),a.get(t)}`:"function"==typeof e?`function:${e.toString()}`:`primitive:${String(e)}`;var t})).join("|")}return function(...t){const c=n(t),a=Date.now(),h=s.get(c);if(h){if(!(void 0!==i&&a-h.timestamp>=i))return h.value;s.delete(c)}const r=e.apply(this,t);return s.set(c,{value:r,timestamp:a}),r}}